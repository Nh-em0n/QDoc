
  <sn><md>### Write Text to a File

Use `cat` with `&gt;` to write input from the terminal to a file:

```bash
cat &gt; file
```

* Type the text you want to save.
* Press `Ctrl+D` to end input.
* The content will be saved to `file`.
</md></sn>
  <config>
    <tags>#03.write to a file</tags>
    <thumbnail></thumbnail>
    <heading></heading>
    <udate>Thu Oct 23 2025 14:56:30 GMT+0600 (Bangladesh Standard Time)</udate>
    <id>article-zME6QYxWrj</id>
    <duration></duration>
  </config>
<sn><md>### Append Text to a File

Use `cat` with `&gt;&gt;` to **append** text to the end of an existing file:

```bash
cat  &gt;&gt; existing_file
```

* Press `Ctrl+D` to finish writing.
</md></sn><sn><md>## heredoc

A **here document** (or **heredoc**) lets you send multiple lines of text as input to a command **directly in the script or terminal**, without needing an external file.

#### Example 1: Create a file using a heredoc

```bash
cat &lt;<end> message.txt
Hello, World.
This is a message written using a heredoc.
END
```

**Output (inside the file):**

```
Hello, World.
This is a message written using a heredoc.
```

---

#### Use heredoc with another command

You can pass multiline text directly into commands like `grep`, `tee`, or `mail`.

```bash
grep "apple" &lt;</end></md></sn><sn><md>###  **Prevent Variable Expansion or Command Substitution**

By default, heredocs **expand** variables and commands before sending the text to the command.

### ‚ö†Ô∏è Normal heredoc (expands variables)

```bash
name="Nazmul"
cat &lt;&lt; END
Hello, $name!
END
```

**Output:**

```
Hello, Nazmul!
```

Bash replaced `$name` with its value.

---

### ‚úÖ Quoted heredoc (no expansion)

If you don‚Äôt want Bash to expand `$variables` or execute `commands`, **quote** the delimiter.

```bash
name="Nazmul"
cat &lt;&lt;'END'
Hello, $name!
Today is `date`.
END
```

**Output:**

```
Hello, $name!
Today is `date`.
```

Here, `$name` and `` `date` `` are printed **literally**, not expanded.

---

### üß† Summary

| Feature                     | Normal Heredoc | Quoted Heredoc |
| --------------------------- | -------------- | -------------- |
| Variables (`$var`) expand   | ‚úÖ Yes          | ‚ùå No           |
| Commands (`` `cmd` ``) run  | ‚úÖ Yes          | ‚ùå No           |
| Use quotes around delimiter | ‚ùå No           | ‚úÖ Yes          |
| Example delimiter           | `&lt;</md></sn><sn><md>### Using `echo` to Write to a File

The `echo` command in Bash prints text to the terminal by default, but you can **redirect** its output to a file.

---

#### 1. **Create or overwrite a file**

Use the `&gt;` operator to **write (or overwrite)** a file:

```bash
echo "Hello, world!" &gt; message.txt
```

**Explanation:**

* Creates `message.txt` if it doesn‚Äôt exist.
* If it exists, its contents are **replaced** with `"Hello, world!"`.

**Check the file:**

```bash
cat message.txt
```

**Output:**

```
Hello, world!
```

---

#### 2. **Append to a file**

Use the `&gt;&gt;` operator to **add** text to the end of an existing file instead of overwriting it:

```bash
echo "This is another line." &gt;&gt; message.txt
```

**Check the file again:**

```bash
cat message.txt
```

**Output:**

```
Hello, world!
This is another line.
```

---

#### 3. **Write multiple lines**

Combine `echo` commands or use `\n` for newlines (with `-e` to interpret them):

```bash
echo -e "Line 1\nLine 2\nLine 3" &gt; lines.txt
cat lines.txt
```

**Output:**

```
Line 1
Line 2
Line 3
```

---

#### 4. **Example: Add system info to a log file**

```bash
echo "System Info on $(date)" &gt; system.log
echo "User: $USER" &gt;&gt; system.log
echo "Current Directory: $(pwd)" &gt;&gt; system.log
cat system.log
```

**Output:**

```
System Info on Thu Oct 23 14:00:00 +0600 2025
User: nazmul
Current Directory: /home/nazmul
```

---

‚úÖ **Summary:**

| Command                    | Description            |                                      |
| -------------------------- | ---------------------- | ------------------------------------ |
| `echo "text" &gt; file`       | Write (overwrite) file |                                      |
| `echo "text" &gt;&gt; file`      | Append to file         |                                      |
| `echo -e "a\nb\nc" &gt; file` | Write multiple lines   |                                      |
| `echo "data"               | cat &gt; file`            | Another way to write input to a file |
</md></sn>