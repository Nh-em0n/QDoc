
	<sn class="col-12 col-md-10 col-lg-9 p-3 p-lg-5 ignore"><h2>ruler.mjs (full code)</h2><pre data-v="javascript">/**
 * class Ruler
 *
 * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and
 * [[MarkdownIt#inline]] to manage sequences of functions (rules):
 *
 * - keep rules in defined order
 * - assign the name to each rule
 * - enable/disable rules
 * - add/replace rules
 * - allow assign rules to additional named chains (in the same)
 * - cacheing lists of active rules
 *
 * You will not need use this class directly until write plugins. For simple
 * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and
 * [[MarkdownIt.use]].
 **/

/**
 * new Ruler()
 **/
function Ruler () {
  // List of added rules. Each element is:
  //
  // {
  //   name: XXX,
  //   enabled: Boolean,
  //   fn: Function(),
  //   alt: [ name2, name3 ]
  // }
  //
  this.__rules__ = []

  // Cached rule chains.
  //
  // First level - chain name, '' for default.
  // Second level - diginal anchor for fast filtering by charcodes.
  //
  this.__cache__ = null
}

// Helper methods, should not be used directly

// Find rule index by name
//
Ruler.prototype.__find__ = function (name) {
  for (let i = 0; i &lt; this.__rules__.length; i++) {
    if (this.__rules__[i].name === name) {
      return i
    }
  }
  return -1
}

// Build rules lookup cache
//
Ruler.prototype.__compile__ = function () {
  const self = this
  const chains = ['']

  // collect unique names
  self.__rules__.forEach(function (rule) {
    if (!rule.enabled) { return }

    rule.alt.forEach(function (altName) {
      if (chains.indexOf(altName) &lt; 0) {
        chains.push(altName)
      }
    })
  })

  self.__cache__ = {}

  chains.forEach(function (chain) {
    self.__cache__[chain] = []
    self.__rules__.forEach(function (rule) {
      if (!rule.enabled) { return }

      if (chain &amp;&amp; rule.alt.indexOf(chain) &lt; 0) { return }

      self.__cache__[chain].push(rule.fn)
    })
  })
}

/**
 * Ruler.at(name, fn [, options])
 * - name (String): rule name to replace.
 * - fn (Function): new rule function.
 * - options (Object): new rule options (not mandatory).
 *
 * Replace rule by name with new function &amp; options. Throws error if name not
 * found.
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * Replace existing typographer replacement rule with new one:
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.core.ruler.at('replacements', function replace(state) {
 *   //...
 * });
 * ```
 **/
Ruler.prototype.at = function (name, fn, options) {
  const index = this.__find__(name)
  const opt = options || {}

  if (index === -1) { throw new Error('Parser rule not found: ' + name) }

  this.__rules__[index].fn = fn
  this.__rules__[index].alt = opt.alt || []
  this.__cache__ = null
}

/**
 * Ruler.before(beforeName, ruleName, fn [, options])
 * - beforeName (String): new rule will be added before this one.
 * - ruleName (String): name of added rule.
 * - fn (Function): rule function.
 * - options (Object): rule options (not mandatory).
 *
 * Add new rule to chain before one with given name. See also
 * [[Ruler.after]], [[Ruler.push]].
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {
 *   //...
 * });
 * ```
 **/
Ruler.prototype.before = function (beforeName, ruleName, fn, options) {
  const index = this.__find__(beforeName)
  const opt = options || {}

  if (index === -1) { throw new Error('Parser rule not found: ' + beforeName) }

  this.__rules__.splice(index, 0, {
    name: ruleName,
    enabled: true,
    fn,
    alt: opt.alt || []
  })

  this.__cache__ = null
}

/**
 * Ruler.after(afterName, ruleName, fn [, options])
 * - afterName (String): new rule will be added after this one.
 * - ruleName (String): name of added rule.
 * - fn (Function): rule function.
 * - options (Object): rule options (not mandatory).
 *
 * Add new rule to chain after one with given name. See also
 * [[Ruler.before]], [[Ruler.push]].
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.inline.ruler.after('text', 'my_rule', function replace(state) {
 *   //...
 * });
 * ```
 **/
Ruler.prototype.after = function (afterName, ruleName, fn, options) {
  const index = this.__find__(afterName)
  const opt = options || {}

  if (index === -1) { throw new Error('Parser rule not found: ' + afterName) }

  this.__rules__.splice(index + 1, 0, {
    name: ruleName,
    enabled: true,
    fn,
    alt: opt.alt || []
  })

  this.__cache__ = null
}

/**
 * Ruler.push(ruleName, fn [, options])
 * - ruleName (String): name of added rule.
 * - fn (Function): rule function.
 * - options (Object): rule options (not mandatory).
 *
 * Push new rule to the end of chain. See also
 * [[Ruler.before]], [[Ruler.after]].
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.core.ruler.push('my_rule', function replace(state) {
 *   //...
 * });
 * ```
 **/
Ruler.prototype.push = function (ruleName, fn, options) {
  const opt = options || {}

  this.__rules__.push({
    name: ruleName,
    enabled: true,
    fn,
    alt: opt.alt || []
  })

  this.__cache__ = null
}

/**
 * Ruler.enable(list [, ignoreInvalid]) -&gt; Array
 * - list (String|Array): list of rule names to enable.
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Enable rules with given names. If any rule name not found - throw Error.
 * Errors can be disabled by second param.
 *
 * Returns list of found rule names (if no exception happened).
 *
 * See also [[Ruler.disable]], [[Ruler.enableOnly]].
 **/
Ruler.prototype.enable = function (list, ignoreInvalid) {
  if (!Array.isArray(list)) { list = [list] }

  const result = []

  // Search by name and enable
  list.forEach(function (name) {
    const idx = this.__find__(name)

    if (idx &lt; 0) {
      if (ignoreInvalid) { return }
      throw new Error('Rules manager: invalid rule name ' + name)
    }
    this.__rules__[idx].enabled = true
    result.push(name)
  }, this)

  this.__cache__ = null
  return result
}

/**
 * Ruler.enableOnly(list [, ignoreInvalid])
 * - list (String|Array): list of rule names to enable (whitelist).
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Enable rules with given names, and disable everything else. If any rule name
 * not found - throw Error. Errors can be disabled by second param.
 *
 * See also [[Ruler.disable]], [[Ruler.enable]].
 **/
Ruler.prototype.enableOnly = function (list, ignoreInvalid) {
  if (!Array.isArray(list)) { list = [list] }

  this.__rules__.forEach(function (rule) { rule.enabled = false })

  this.enable(list, ignoreInvalid)
}

/**
 * Ruler.disable(list [, ignoreInvalid]) -&gt; Array
 * - list (String|Array): list of rule names to disable.
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Disable rules with given names. If any rule name not found - throw Error.
 * Errors can be disabled by second param.
 *
 * Returns list of found rule names (if no exception happened).
 *
 * See also [[Ruler.enable]], [[Ruler.enableOnly]].
 **/
Ruler.prototype.disable = function (list, ignoreInvalid) {
  if (!Array.isArray(list)) { list = [list] }

  const result = []

  // Search by name and disable
  list.forEach(function (name) {
    const idx = this.__find__(name)

    if (idx &lt; 0) {
      if (ignoreInvalid) { return }
      throw new Error('Rules manager: invalid rule name ' + name)
    }
    this.__rules__[idx].enabled = false
    result.push(name)
  }, this)

  this.__cache__ = null
  return result
}

/**
 * Ruler.getRules(chainName) -&gt; Array
 *
 * Return array of active functions (rules) for given chain name. It analyzes
 * rules configuration, compiles caches if not exists and returns result.
 *
 * Default chain name is `''` (empty string). It can't be skipped. That's
 * done intentionally, to keep signature monomorphic for high speed.
 **/
Ruler.prototype.getRules = function (chainName) {
  if (this.__cache__ === null) {
    this.__compile__()
  }

  // Chain can be empty, if rules disabled. But we still have to return Array.
  return this.__cache__[chainName] || []
}

export default Ruler
</pre></sn>		
	<config>
		<tags>#ruler</tags>
		<thumbnail></thumbnail>
		<heading></heading>
		<udate>Fri Jul 25 2025 20:35:47 GMT+0600 (Bangladesh Standard Time)</udate>
		<id>article-SU90qbs6bv</id>
		<duration></duration>
	</config>
<sn class="col-12 col-md-10 col-lg-9 ignore p-3 p-lg-5"><md>#### Part1

```js
/**
 * class Ruler
 *
 * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and
 * [[MarkdownIt#inline]] to manage sequences of functions (rules):
 *
 * - keep rules in defined order
 * - assign the name to each rule
 * - enable/disable rules
 * - add/replace rules
 * - allow assign rules to additional named chains (in the same)
 * - cacheing lists of active rules
 *
 * You will not need use this class directly until write plugins. For simple
 * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and
 * [[MarkdownIt.use]].
 **/

/**
 * new Ruler()
 **/
function Ruler () {
  // List of added rules. Each element is:
  //
  // {
  //   name: XXX,
  //   enabled: Boolean,
  //   fn: Function(),
  //   alt: [ name2, name3 ]
  // }
  //
  this.__rules__ = []

  // Cached rule chains.
  //
  // First level - chain name, '' for default.
  // Second level - diginal anchor for fast filtering by charcodes.
  //
  this.__cache__ = null
}
```




## Purpose of `Ruler`

The `Ruler` class is a **utility** for managing ordered sets of functions (called "rules") that are applied during parsing. It allows `markdown-it` to:

* **Add or replace rules**
* **Enable or disable rules**
* **Assign rules to named chains**
* **Maintain execution order**
* **Cache active rule lists** for better performance

---

## Documentation Comment

```js
/**
 * class Ruler
 *
 * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and
 * [[MarkdownIt#inline]] to manage sequences of functions (rules):
 *
 * - keep rules in defined order
 * - assign the name to each rule
 * - enable/disable rules
 * - add/replace rules
 * - allow assign rules to additional named chains (in the same)
 * - cacheing lists of active rules
 *
 * You will not need use this class directly until write plugins. For simple
 * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and
 * [[MarkdownIt.use]].
 */
```

### Summary:

* **Used Internally** by:

  * `MarkdownIt#core` – the main parsing engine
  * `MarkdownIt#block` – block-level parsing (e.g., paragraphs, headings)
  * `MarkdownIt#inline` – inline-level parsing (e.g., bold, links)
* You don’t need to use `Ruler` unless you're writing a **plugin**
* Public-facing APIs (`disable`, `enable`, `use`) are built on top of it

---

## Constructor Function: `Ruler`

```js
function Ruler () {
```

Defines the `Ruler` function. This is how JavaScript created classes before the `class` syntax.

---

### Internal Property: `__rules__`

```js
  this.__rules__ = []
```

This is an array that stores all registered rules in the order they were added.

Each rule is stored as an object:

```js
{
  name: 'ruleName',       // Unique name
  enabled: true/false,    // Is this rule currently enabled?
  fn: Function,           // The rule function to run
  alt: ['alt1', 'alt2']   // Alternative rule chain names (optional)
}
```

---

### Internal Property: `__cache__`

```js
  this.__cache__ = null
```

* This will store **precomputed lists** of enabled rules.
* Used to speed up rule lookup and avoid recomputing the rule list repeatedly.
* The comment indicates that rules may be grouped by:

  * **Chain name** (`''` as default)
  * **Character codes (digit anchors)** — likely for performance optimization

---

## Summary

| Feature        | Purpose                                                               |
| -------------- | --------------------------------------------------------------------- |
| `__rules__`    | Stores all rules with metadata (name, function, enabled, etc.)        |
| `__cache__`    | Caches computed rule chains for quick lookup                          |
| Class usage    | Used internally in `markdown-it` to manage rule processing            |
| Plugin utility | Direct use is only required if you're writing or customizing a plugin |

</md></sn><sn class="col-12 col-md-10 col-lg-9 ignore p-3 p-lg-5"><md>### Function: `Ruler.prototype.__find__`

```js
Ruler.prototype.__find__ = function (name) {
  for (let i = 0; i &lt; this.__rules__.length; i++) {
    if (this.__rules__[i].name === name) {
      return i
    }
  }
  return -1
}
```

### Purpose:

To **search for a rule by its name** inside the `__rules__` array and return its index. If the rule does not exist, it returns `-1`.

---

## Breakdown

| Line                                                | Explanation                                                                                            |
| --------------------------------------------------- | ------------------------------------------------------------------------------------------------------ |
| `Ruler.prototype.__find__ = function (name) {`      | Adds a method `__find__` to the `Ruler` prototype. It takes a `name` (string) of the rule to look for. |
| `for (let i = 0; i &lt; this.__rules__.length; i++) {` | Iterates through the list of registered rules stored in `this.__rules__`.                              |
| `if (this.__rules__[i].name === name) {`            | Checks if the current rule's `name` matches the input `name`.                                          |
| `return i`                                          | If found, return the **index** where the rule is located.                                              |
| `return -1`                                         | If not found after searching the entire array, return `-1` to indicate failure.                        |

---

## Why is it named `__find__`?

* The double underscores (`__`) signal that this is an **internal/private helper**, not part of the public API.
* It is only meant to be used by other internal methods (like `push`, `enable`, etc.), not by external code.

---

## Usage Example (internal use only):

Assume this rule list:

```js
this.__rules__ = [
  { name: 'paragraph', enabled: true, fn: ..., alt: [] },
  { name: 'heading', enabled: true, fn: ..., alt: [] }
]
```

Then:

```js
this.__find__('heading')  // returns 1
this.__find__('list')     // returns -1
```

---

## Summary

| Feature | Description                                        |
| ------- | -------------------------------------------------- |
| Name    | `__find__` (internal method)                       |
| Purpose | Finds the index of a rule by its name              |
| Input   | `name` (string)                                    |
| Output  | Index of rule in `__rules__`, or `-1` if not found |
| Access  | Private – used internally in `Ruler` methods only  |

</md></sn><sn class="col-12 col-md-10 col-lg-9 ignore p-3 p-lg-5"><md>### Method: `Ruler.prototype.__compile__`

```js
// Build rules lookup cache
//
Ruler.prototype.__compile__ = function () {
  const self = this
  const chains = ['']

  // collect unique names
  self.__rules__.forEach(function (rule) {
    if (!rule.enabled) { return }

    rule.alt.forEach(function (altName) {
      if (chains.indexOf(altName) &lt; 0) {
        chains.push(altName)
      }
    })
  })

  self.__cache__ = {}

  chains.forEach(function (chain) {
    self.__cache__[chain] = []
    self.__rules__.forEach(function (rule) {
      if (!rule.enabled) { return }

      if (chain &amp;&amp; rule.alt.indexOf(chain) &lt; 0) { return }

      self.__cache__[chain].push(rule.fn)
    })
  })
}
```



#### Purpose:

To **generate a cache (`__cache__`)** that maps each chain name (like `'inline'`, `'block'`, etc.) to an array of **enabled rule functions (`fn`)** that belong to that chain.

---

## Full Breakdown

```js
Ruler.prototype.__compile__ = function () {
  const self = this
  const chains = ['']
```

* `self` is a reference to `this`, used inside nested functions.
* `chains` starts with the default chain name: `''`.

```js
  // collect unique names
  self.__rules__.forEach(function (rule) {
    if (!rule.enabled) { return }

    rule.alt.forEach(function (altName) {
      if (chains.indexOf(altName) &lt; 0) {
        chains.push(altName)
      }
    })
  })
```

### Step 1: **Identify unique chain names**

* Iterate through all **enabled** rules.
* For each rule’s `alt` array (alternative chain names), add any new name to the `chains` array.

So if a rule has:

```js
{ name: 'foo', enabled: true, alt: ['inline', 'custom'] }
```

The `chains` array becomes:

```js
['', 'inline', 'custom']
```

---

```js
  self.__cache__ = {}
```

* Reset the rule cache.

---

```js
  chains.forEach(function (chain) {
    self.__cache__[chain] = []

    self.__rules__.forEach(function (rule) {
      if (!rule.enabled) { return }

      if (chain &amp;&amp; rule.alt.indexOf(chain) &lt; 0) { return }

      self.__cache__[chain].push(rule.fn)
    })
  })
```

### Step 2: **Build cache for each chain**

* For each chain name in `chains`:

  * Create an array `self.__cache__[chain]` to store the rule functions.
* Then iterate through all **enabled** rules:

  * If we're not processing the default chain (`''`), check whether the rule belongs to this chain using `rule.alt.indexOf(chain)`.
  * If it qualifies, push the rule's function (`fn`) into the cache.

---

## Example

### Given `__rules__`:

```js
[
  { name: 'a', enabled: true, fn: A, alt: ['inline'] },
  { name: 'b', enabled: true, fn: B, alt: [] },
  { name: 'c', enabled: false, fn: C, alt: ['inline'] },
  { name: 'd', enabled: true, fn: D, alt: ['block'] }
]
```

### After `__compile__`, `__cache__` will be:

```js
{
  '':     [A, B, D],       // default chain (includes all enabled rules)
  'inline': [A],           // only rules that are enabled and have 'inline' in alt
  'block':  [D]
}
```

---

## Summary

| Component   | Description                                                        |
| ----------- | ------------------------------------------------------------------ |
| `chains`    | Collects unique chain names (`''` is default)                      |
| `alt` field | Declares rule’s membership in one or more named chains             |
| `__cache__` | Maps chain name → array of `fn`s (rule functions) that are enabled |
| Purpose     | Optimize rule execution by pre-selecting relevant, enabled rules   |

---

### Why it's important

This method avoids recomputing which rules to run each time by building a ready-to-use **rule chain** for each chain name. It’s essential for performance and modularity.

</md></sn><sn class="col-12 col-md-10 col-lg-9 ignore p-3 p-lg-5"></sn><sn class="col-12 col-md-10 col-lg-9 ignore p-3 p-lg-5"></sn><sn class="col-12 col-md-10 col-lg-9 ignore p-3 p-lg-5"></sn><sn class="col-12 col-md-10 col-lg-9 ignore p-3 p-lg-5"></sn><sn class="col-12 col-md-10 col-lg-9 ignore p-3 p-lg-5"></sn><sn class="col-12 col-md-10 col-lg-9 ignore p-3 p-lg-5"></sn>