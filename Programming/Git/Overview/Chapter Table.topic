<sn><md>### Chapter Table
---

| Index | Chapter Name                                                | Short Description                                                                                                                                                              |
| :---- | :---------------------------------------------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| 1     | Getting started with Git                                    | Covers initial setup, creating and cloning repositories, adding and committing files, sharing code, setting user identity, SSH setup, and installation procedures.       |
| 2     | Browsing the history                                        | Details various ways to view commit history using `git log` (regular, pretty, oneline, color, search, filter), showing single commits, and viewing logs between branches. |
| 3     | Working with Remotes                                        | Explains managing remote repositories: adding, listing, removing, renaming, changing URLs, setting upstream branches, fetching, pulling, and deleting remote branches.    |
| 4     | Staging                                                     | Focuses on the staging area: staging changes (all, single file, by hunk, interactively), unstaging files, and viewing staged changes.                                 |
| 5     | Ignoring Files and Folders                                  | Discusses using `.gitignore` files (local, global, exceptions), checking ignored files, ignoring files already committed or tracked, local ignore rules, and empty directories. |
| 6     | Git Diff                                                    | Describes showing differences in various contexts: working branch, between commits/branches, staged files, specific files/directories, word-diff, patches, and using external tools. |
| 7     | Undoing                                                     | Covers methods for undoing changes and returning to previous states using commands like `checkout`, `reset`, `reflog`, `revert`, and interactive rebase.             |
| 8     | Merging                                                     | Explains the process of merging branches (automatic, manual conflict resolution), aborting merges, merging with specific commits, keeping changes from one side, and finding non-merged branches. |
| 9     | Submodules                                                  | Details how to include other repositories as submodules: cloning with submodules, updating, adding, setting to follow branches, moving, and removing submodules.    |
| 10    | Committing                                                  | Covers the process of staging and committing changes, writing effective commit messages, amending commits, committing without an editor, signing commits, and setting commit metadata. |
| 11    | Aliases                                                     | Explains creating and managing simple and advanced Git aliases for common commands and workflows.                                                                       |
| 12    | Rebasing                                                    | Discusses reapplying commits on top of another commit (local, interactive), understanding "ours" and "theirs", resolving conflicts, autosquashing, and pushing after rebase. |
| 13    | Configuration                                               | Explains customizing Git settings (editor, autocorrect, user info, line endings, proxies) at the system, global, or local repository level, including multiple configurations. |
| 14    | Branching                                                   | Covers creating, checking out, listing, deleting, renaming, and searching for branches, switching to previous branches, setting up tracking, and moving the branch HEAD. |
| 15    | Rev-List                                                    | Describes listing commits in one branch that are not present in another branch.                                                                                           |
| 16    | Squashing                                                   | Explains combining multiple commits into a single one, including squashing recent commits without rebase, during merge, or during an interactive rebase.           |
| 17    | Cherry Picking                                              | Discusses copying specific commits or a range of commits from one branch to another and checking if a cherry-pick is needed or applied.                                |
| 18    | Recovering                                                  | Provides methods for recovering lost commits or changes, including recovering from resets, stashes, lost commits, deleted files, previous file versions, and deleted branches using `reflog`. |
| 19    | Git Clean                                                   | Covers removing untracked files and directories (interactively, forcefully), including removing ignored files.                                                        |
| 20    | Using a .gitattributes file                                 | Explains using `.gitattributes` for automatic line ending normalization, identifying binary files, and disabling normalization.                                       |
| 21    | .mailmap file: Associating contributor and email aliases    | Describes using the `.mailmap` file to associate contributor names and email aliases for better statistics display.                                             |
| 22    | Analyzing types of workflows                                | Explores different Git branching strategies and workflows, such as Centralized, Gitflow, Feature Branch, GitHub Flow, and Forking Workflows.                          |
| 23    | Pulling                                                     | Covers fetching changes from a remote repository and integrating them into the local branch, including simple pull, manual pull, handling local changes, and keeping linear history. |
| 24     | Hooks                                                       | Introduces Git hooks (client-side and server-side), explaining various types like pre-push, pre-commit, post-receive, and how they are used.                            |
| 25    | Cloning Repositories                                        | Details copying an existing Git repository (regular, shallow, specific branch, recursively) from a server to the local machine, including cloning via proxy.        |
| 26    | Stashing                                                    | Explains saving uncommitted changes temporarily using the stash stack, including creating, listing, applying, removing, showing, and recovering stashes.        |
| 27    | Subtrees                                                    | Covers managing subtrees within a Git repository, including creating, pulling, and backporting changes.                                                                 |
| 28    | Renaming                                                    | Describes renaming folders, local branches, and local/remote branches.                                                                                                  |
| 29    | Pushing                                                     | Explains transferring local commits to a remote repository, including pushing specific objects/branches, force pushing, pushing tags, and changing default push behavior. |
| 30    | Internals                                                   | Provides an overview of Git's internal architecture, including repositories, objects (blobs, trees, commits, tags), refs (HEAD, branches), and how commits and refs are created and moved. |
| 31    | git-tfs                                                     | Covers using `git-tfs` to interact with Team Foundation Version Control (TFVC), including cloning, checking in, and pushing changes.                                   |
| 32    | Empty directories in Git                                    | Explains that Git does not track empty directories and common workarounds like using `.gitkeep` files.                                                                |
| 33    | git-svn                                                     | Details using `git-svn` to interact with Subversion repositories, including cloning, pushing/pulling changes, working locally, and handling empty folders.        |
| 34    | Archive                                                     | Describes creating compressed archives (tar, zip) of a Git repository or specific parts of its history (branch, revision, tag, directory).                          |
| 35    | Rewriting history with filter-branch                        | Covers using `git filter-branch` to modify the repository's history, such as changing the author or committer of commits.                                          |
| 36    | Migrating to Git                                            | Discusses migrating repositories from other version control systems like SVN, Mercurial, and TFVC to Git using various tools and methods.                              |
| 37    | Show                                                        | Explains using `git show` to display information about various Git objects, such as commit messages, diffs, trees, blobs, and tags.                                   |
| 38    | Resolving merge conflicts                                   | Details manually resolving conflicts that occur during a merge operation by editing files and marking resolutions.                                                      |
| 39    | Bundles                                                     | Describes creating and using Git bundles to transfer repository changes between machines without direct network access.                                             |
| 40    | Display commit history graphically with Gitk                | Covers using the `gitk` GUI tool to visualize the repository's commit history for the entire repository, a single file, between commits, or since a tag.            |
| 41    | Bisecting/Finding faulty commits                            | Explains using `git bisect` to perform a binary search through commit history to find the specific commit that introduced a bug.                                      |
| 42    | Blaming                                                     | Describes using `git blame` to annotate lines in a file with information about the commit and author who last modified them, including options to ignore whitespace or limit lines. |
| 43    | Git revisions syntax                                        | Provides a comprehensive guide to specifying commits and other objects using various syntax forms, including SHA-1 names, symbolic refs, reflogs, ancestry chains, and dereferencing. |
| 44    | Worktrees                                                   | Covers using `git worktree` to create multiple linked working trees of the same repository, useful for working on multiple tasks concurrently, and moving worktrees.    |
| 45    | Git Remote                                                  | Discusses managing remote repositories using the `git remote` command: displaying, adding, removing, renaming, changing URLs, and showing detailed information.     |
| 46    | Git Large File Storage (LFS)                                | Explains using Git LFS to manage large files by storing them externally, including declaring file types, configuring LFS, and installation.                     |
| 47    | Git Patch                                                   | Covers creating patch files from commits using `git format-patch` and applying patches to a working directory or as new commits using `git apply` and `git am`.    |
| 48    | Git statistics                                              | Describes commands and techniques for generating various statistics about the repository, such as lines of code/commits per developer, commits per date, and finding local repositories. |
| 49    | git send-email                                              | Explains using `git send-email` to send patches via email, including setup for Gmail, composing messages, and sending patch sets.                                  |
| 50    | Git GUI Clients                                             | Lists and provides brief descriptions of various graphical user interfaces for Git, including the built-in `gitk`/`git-gui` and external clients like GitHub Desktop, Git Kraken, and SourceTree. |
| 51    | Reflog - Restoring commits not shown in git log             | Focuses on using `git reflog` to recover lost commits or states that may not appear in the standard `git log`, such as recovering from a bad rebase.           |
| 52    | TortoiseGit                                                 | Provides specific instructions for performing common Git operations (squashing, assume unchanged, ignoring, branching) using the TortoiseGit GUI client.           |
| 53    | External merge and diff tools                               | Explains how to configure Git to use external third-party tools (like KDiff3, IntelliJ, Beyond Compare) for resolving merge conflicts and viewing diffs.       |
| 54    | Update Object Name in Reference                             | Describes using the low-level `git update-ref` command to manually change the object name that a reference (like a branch HEAD) points to.                          |
| 55    | Git Branch Name on Bash Ubuntu                              | Explains how to configure the Bash terminal prompt (`PS1`) on Ubuntu to display the current Git branch name.                                                     |
| 56    | Git Client-Side Hooks                                       | Provides an overview and examples of client-side Git hooks, specifically detailing the `pre-push` hook and how to install hooks.                                  |
| 57    | Git rerere                                                  | Covers enabling and using `git rerere` (reuse recorded resolution) to automatically resolve recurring merge conflicts.                                            |
| 58    | Change git repository name                                  | Explains how to update the local Git configuration to reflect a change in the remote repository's name or URL.                                                        |
| 59    | Git Tagging                                                 | Describes listing, creating, and pushing tags to mark significant points in the repository's history.                                                               |
| 60    | Tidying up your local and remote repository                 | Covers commands for cleaning up local and remote repositories, specifically focusing on deleting local branches that no longer exist on the remote.             |
| 61    | diff-tree                                                   | Explains using `git diff-tree` to compare two tree objects and see the files that changed in a specific commit.                                               |
</md></sn><config style="display:none"><tags>#chapter table</tags><thumbnail></thumbnail><heading></heading><udate>Sun Jun 01 2025 16:48:34 GMT+0600 (Bangladesh Standard Time)</udate><id>article-YKHomVVttM</id><duration></duration></config>