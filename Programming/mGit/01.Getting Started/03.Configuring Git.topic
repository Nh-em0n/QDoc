
	<sn><md>## Configuring Git

After installing Git, it is important to `configure` it so that it works according to your preferences. Git allows configuration at different levels and provides options for setting user details, default editors, and line-ending handling.

</md></sn>		
	<config>
		<tags>#03.configuring git</tags>
		<thumbnail></thumbnail>
		<heading></heading>
		<udate>Wed Sep 03 2025 16:26:57 GMT+0600 (Bangladesh Standard Time)</udate>
		<id>article-PCmHpipN6b</id>
		<duration></duration>
	</config>
<sn><md>### Git Configuration Levels

:::.row

:::.col-12 .col-lg-7
Git has three levels of configuration. Settings are **inherited from system → global → local**, meaning local overrides global, and global overrides system.
:::

:::.col-12 .col-lg-5
![diagram](https://mazer.dev/en/git/introduction/git-config-username-email/git-config-levels.jpg)
:::

:::


| Level      | Scope                                 | Location                                 | Priority | Inheritance                                     |
| ---------- | ------------------------------------- | ---------------------------------------- | -------- | ----------------------------------------------- |
| `System` | Applies to every user on the computer | `/etc/gitconfig`                         | Lowest   | Inherited by Global and Local if not overridden |
| `Global` | Applies to the current user           | `~/.gitconfig` or `~/.config/git/config` | Medium   | Overrides System settings                       |
| `Local`  | Applies only to a single repository   | `.git/config` inside the repo            | Highest  | Overrides System and Global                     |

+++ see real example
| Scope          | Example                                                                                             |
| -------------- | --------------------------------------------------------------------------------------------------- |
| **System**     | ![System Config](https://i.imgur.com/7yCx0q2.png) <br> *file\:C:/Program Files/Git/etc/gitconfig*   |
| **Global**     | ![Global Config](https://i.imgur.com/5V0wVwE.png) <br> *file\:C:/Users/Emon/.gitconfig*             |
| **Repository** | ![Repository Config](https://i.imgur.com/4jMuu4O.png) <br> *C:\Users\Emon\git\_practise.git\config* |
+++

</md>
</sn><sn><md>## syntax

```bash
git config --<level> key value
```

Where `<level>` can be `--system`, `--global`, or `--local`.
</level></level>

&gt; press ==q==  key to exit.</md></sn><sn><md>## Configuring User Information

Every commit in Git is recorded with a `name` and `email`. These should be configured before you start working:

```bash
git config --global user.name "Your Name"
git config --global user.email "your@email.com"
```

You can also set them at **local level** for a specific project:

```bash
git config --local user.name "Project Specific Name"
git config --local user.email "project@email.com"
```
</md></sn><sn><md>## Configuring Default Editor

Git often requires an editor (for commit messages, merges, etc.). You can set your preferred editor. Example with **Visual Studio Code**:

```bash
git config --global core.editor "code --wait"
```

The `--wait` option makes sure the terminal waits until you close the editor before continuing.

For **Vim**:

```bash
git config --global core.editor "vim"
```

For **Notepad (Windows)**:

```bash
git config --global core.editor "notepad"
```
</md></sn><sn><md>## Configuring Line Endings (CRLF vs LF)

:::.row

:::.col-12 .col-lg-7
#### Different operating systems use different line endings:

* **Windows:** Uses `CRLF` (`abc\r\n`)
* **Linux/macOS:** Use `LF` (`abc\n`)
:::

:::.col-12 .col-lg-5
![diagram](https://raw.githubusercontent.com/Nh-em0n/QDoc/main/Programming/mGit/media/crlf-in-os-mosh-diagram.png)
:::

:::


:::.row

:::.col-12 .col-lg-7
This can cause problems when working across different systems. Git provides settings to handle this automatically:

* **On Windows (convert LF to CRLF when checking out, keep LF in repository):**

  ```bash
  git config --global core.autocrlf true
  ```

* **On Linux/macOS (leave LF unchanged):**

  ```bash
  git config --global core.autocrlf input
  ```

* **Disable conversion completely:**

  ```bash
  git config --global core.autocrlf false
  ```
:::

:::.col-12 .col-lg-5
![diagram](https://raw.githubusercontent.com/Nh-em0n/QDoc/main/Programming/mGit/media/crlf-config-mosh-diagram.png)
:::

:::

</md></sn><sn><md>### Verify Configuration

To check your settings:

```bash
git config --list
```

Or check by level:

```bash
git config --system --list
git config --global --list
git config --local --list
```
</md></sn><sn><md>## Git Default Branch Name Configuration

When you create a new Git repository, Git automatically creates a **default branch**. Traditionally, this branch was called **`master`**, but in modern versions of Git (since v2.28, July 2020), the default branch can be customized. Many projects and platforms (like GitHub) now use **`main`** as the default branch.

---

#### Setting the Default Branch Name

You can configure Git to use your preferred default branch name for all **new repositories** with:

```bash
git config --global init.defaultBranch main
```</md></sn><sn><md>## Setup Sublime as Core Editor

1. Go to your **system-level Git config path**:

   ```
   C:\Users\Emon
   ```

2. Locate the file **`.gitconfig`** and double-click to open it.
   ![screenshot](https://i.imgur.com/xXwcGqH.png)

3. It will open in VS Code or another text editor. Add the following code under the **\[core]** section:

   ```bash
   editor = "C:\\Program Files\\Sublime Text\\subl.exe" -w
   ```

4. Your `.gitconfig` should look like this:

   ```bash
   [core]
       editor = "C:\\Program Files\\Sublime Text\\subl.exe" -w
   [user]
       email = Your@email.com
       name = Your Name
   ```
</md></sn>