
	<sn><md>### Working with `.gitignore` in Git{.text-center}

The `.gitignore` file is an essential part of Git projects. It tells Git which files or directories to ignore, so they don’t get tracked in version control. This helps keep your repository clean by excluding temporary files, build outputs, or other environment-specific files.

</md></sn>		
	<config>
		<tags>#10.ignoring files</tags>
		<thumbnail></thumbnail>
		<heading></heading>
		<udate>Fri Sep 05 2025 15:16:03 GMT+0600 (Bangladesh Standard Time)</udate>
		<id>article-LThmH4INEX</id>
		<duration></duration>
	</config>
<sn><md>### Creating a New `.gitignore` File{.text-center}

To create a `.gitignore` file in your project root:

```bash
$ touch .gitignore
```

You can then open it in a text editor and add patterns to specify which files Git should ignore.

Example:

```
# Ignore log files
*.log

# Ignore node_modules directory
node_modules/

# Ignore compiled Python files
*.pyc
```

After editing `.gitignore`, add and commit it:

```bash
$ git add .gitignore
$ git commit -m "Add .gitignore file"
</md></sn><sn><md>### `.gitignore` Syntax Patterns{.text-center}

Git uses simple pattern matching in `.gitignore`:

* `*.ext` → Ignore all files ending with `.ext`
* `/filename.txt` → Ignore only `filename.txt` in the root directory
* `folder/` → Ignore an entire folder
* `**/logs/` → Ignore any `logs` folder in any subdirectory
* `!important.txt` → Exclude everything except `important.txt`

&gt; See a collection of .gitignore template [github/gitignore](https://github.com/github/gitignore)
</md></sn><sn><md>### Conflict When Adding `.gitignore` Later{.text-center}

A common issue arises if you add a `.gitignore` file **after** certain files or folders are already being tracked by Git.

#### Example:

1. Suppose you committed `debug.log` before creating `.gitignore`.
2. Later, you add `*.log` to `.gitignore`.
3. Git will still keep tracking `debug.log` because it was already committed before.

#### How to Fix It:

To stop tracking an already-tracked file after updating `.gitignore`:

```bash
$ git rm --cached debug.log
$ git commit -m "Stop tracking debug.log"
```

Now Git will respect `.gitignore` and won’t track future log files.
</md></sn><sn><md>### Best Practices for `.gitignore`

* Add `.gitignore` **early in the project** to avoid conflicts.
* Use language/framework-specific `.gitignore` templates (GitHub provides many).
* Always double-check before removing files from Git history, especially if they may contain important data.
</md></sn><sn><md>### Practise {.text-center}

+++ see

#### Creating a new `a.temp` file in a `/temp` folder

```bash
$ mkdir temp
$ echo "this is a temp file" &gt; temp/a.temp

$ git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        temp/

nothing added to commit but untracked files present (use "git add" to track)

$ git add temp/a.temp
warning: in the working copy of 'temp/a.temp', LF will be replaced by CRLF the next time Git touches it

$ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   temp/a.temp

$ git commit -m "create a temp file in temp folder"
[master 6dcc1e7] create a temp file in temp folder
 1 file changed, 1 insertion(+)
 create mode 100644 temp/a.temp
```

---

### Creating `.gitignore` file

```bash
$ touch .gitignore
$ echo "temp/" &gt;&gt; .gitignore

$ git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        .gitignore

nothing added to commit but untracked files present (use "git add" to track)

$ git add .gitignore
warning: in the working copy of '.gitignore', LF will be replaced by CRLF the next time Git touches it

$ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   .gitignore

$ git commit -m "add .gitignore"
[master 69f3b68] add .gitignore
 1 file changed, 1 insertion(+)
 create mode 100644 .gitignore

$ git status
On branch master
nothing to commit, working tree clean
```

---

### Solving Conflict

Now let’s see what happens if we change `temp/a.temp` after `.gitignore` has been created.

```bash
$ cat .gitignore
temp/

$ echo "new contentn" &gt;&gt; temp/a.temp

$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   temp/a.temp

no changes added to commit (use "git add" and/or "git commit -a")
```

Although we added `temp/` in `.gitignore`, the file `a.temp` is **still being tracked**, because it was committed before `.gitignore` was created.

To fix this, we need to remove it from Git **without deleting it from the working directory**:

```bash
$ git rm --cached temp/a.temp
rm 'temp/a.temp'

$ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        deleted:    temp/a.temp

$ git commit -m "remove a.temp"
[master c2e0a9b] remove a.temp
 1 file changed, 1 deletion(-)
 delete mode 100644 temp/a.temp

$ git status
On branch master
nothing to commit, working tree clean
```

The file was removed from Git tracking, but it still exists locally:

```bash
$ cd temp
$ ls
a.temp
```

---

#### Now will `a.temp` be ignored?

```bash
$ cd ../

$ echo "new data" &gt;&gt; temp/a.temp

$ git status
On branch master
nothing to commit, working tree clean
```

✅ Now Git ignores `a.temp` properly because it’s listed in `.gitignore` and no longer tracked.

+++</file></file></file></file></file></file></file></md></sn><sn><md>## Ignore a folder that is already tracked{.text-center}


#### Step 1: Add the Folder to `.gitignore`

Open or create a `.gitignore` file in your project root and add the folder path:

```
folder_name/
```

#### Step 2: Remove the Folder from Git Tracking (But Keep It Locally)

Run the following command:

```bash
$ git rm -r --cached folder_name/
```

* `--cached` tells Git to stop tracking the folder.
* The folder and its files will remain **locally** on your disk, but Git will no longer include them in commits.


#### Step 3: Commit the Change

Commit the update so the ignore rule takes effect in the repository:

```bash
$ git commit -m "Stop tracking folder_name and add to .gitignore"
$ git push origin main
```


#### Step 4: Verify

Check the status:

```bash
$ git status
```

The folder should no longer appear as a tracked file or in future changes.

**Summary**

* `.gitignore` only prevents *new* files from being tracked.
* To ignore an *already tracked* folder, you must untrack it with:

  ```bash
  git rm -r --cached folder_name/
  ```
</md></sn>