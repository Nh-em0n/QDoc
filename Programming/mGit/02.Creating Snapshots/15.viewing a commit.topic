
	<sn><md>## Viewing Commits and Objects with Git Show{.text-center}

Git provides powerful ways to inspect the content of your repository history. One of the most useful commands is **`git show`**, which lets you view details about different Git objects such as **commits, trees, blobs, and tags**.

</md></sn>		
	<config>
		<tags>#15.viewing a commit</tags>
		<thumbnail></thumbnail>
		<heading></heading>
		<udate>Fri Sep 05 2025 10:49:13 GMT+0600 (Bangladesh Standard Time)</udate>
		<id>article-qBDBqfLk7l</id>
		<duration></duration>
	</config>
<sn><md>### Git Objects in Brief{.text-center}

In Git, everything is stored as an **object**. The four main types are:

* **Commit** → Stores metadata about a commit (author, date, parent commits) and a reference to a tree.
* **Tree** → Represents a directory structure (maps filenames to other trees or blobs).
* **Blob** → Represents the content of a file.
* **Tag** → A named reference pointing to a specific commit (or object).
</md></sn><sn><md>### Using `git show` on Commits{.text-center}

The simplest form of `git show` displays the **commit message, metadata, and diff**:

```bash
$ git show [commit-hash]
```

Example:

```bash
$ git show a1b2c3d
```

This shows details of the commit with hash `a1b2c3d`.
</md></sn><sn><md>### Viewing the Current HEAD{.text-center}

`HEAD` always points to the current commit you are on.

```bash
$ git show HEAD
```

Shows details of the **latest commit** on the current branch.
</md></sn><sn><md>### Viewing Previous Commits{.text-center}

You can use **`~` (tilde)** to go back through the commit history:

* `HEAD~1` → One commit before the current `HEAD`
* `HEAD~2` → Two commits before `HEAD`
* `HEAD~n` → N commits before `HEAD`

Example:

```bash
$ git show HEAD~1
```

Shows the commit just before the latest one.
</md></sn><sn><md>### Viewing Specific File Changes in a Commit{.text-center}

You can use `file` to see changes for a specific file inside a commit:

```bash
$ git show HEAD~1 -- file1.txt
```

This shows how `file1.txt` was modified in the previous commit.</md></sn><sn><md>### Viewing Trees (Directories){.text-center}

To view the directory structure (tree object) of a commit:

```bash
$ git show [commit-hash]^{tree}
```

Example:

```bash
$ git show HEAD^{tree}
```

This shows the tree object for the current commit.</md></sn><sn><md>### Viewing Blobs (Files){.text-center}

To directly display the content of a file (blob object) from a commit:

```bash
$ git show [commit-hash]:[file-path]
```

Example:

```bash
$ git show HEAD:file1.txt
```

This prints the content of `file1.txt` as it exists in the current commit.
</md></sn><sn><md>### Viewing Tags{.text-center}

If you have a tag, you can view it with:

```bash
$ git show <tag-name>
```

Example:

```bash
$ git show v1.0
```

If the tag points to a commit, it will show that commit’s details.
</tag-name></md></sn><sn><md>### Summary Table{.text-center}

| Command                    | Description                                    |
| -------------------------- | ---------------------------------------------- |
| `git show [commit-hash]`   | Show details of a specific commit              |
| `git show HEAD`            | Show the latest commit                         |
| `git show HEAD~1`          | Show the commit before the latest one          |
| `git show HEAD~2`          | Show two commits before HEAD                   |
| `git show HEAD:file.txt`   | Show content of a file from the current commit |
| `git show [commit]:[file]` | Show content of a file at a specific commit    |
| `git show [commit]^{tree}` | Show the directory structure (tree object)     |
| `git show [tag]`           | Show details of a tag                          |

This makes `git show` a versatile tool for **exploring commits, files, directories, and tags** inside your Git repository.
</md></sn><sn><md>## Practice{.text-center}

+++ see

### Checking Commits

```bash
$ git log --oneline
604cfb0 (HEAD -&gt; master) update file2
613e2b9 update note content
1c07c60 Update file1
c2e0a9b remove a.temp
69f3b68 add .gitignore
6dcc1e7 create a temp file in temp folder
86a240e change file1 extension to md
7b2e050 Add two note file again
23088c4 remove file1
839814d remove file2
5ebf799 update note2
1656114 Initial Commit
```

### Checking the First Last Commit with Hash ID (`604cfb0`)

```bash
$ git show 604cfb0
commit 604cfb0df6481eafa4dea8ccbc60b43cfc7435cb (HEAD -&gt; master)
Author: Nh-em0n [nhemon2043@gmail.com]
Date:   Fri Sep 5 00:50:02 2025 +0600

    update file2

diff --git a/file2.md b/file2.md
index d4b48b4..c560b9a 100644
--- a/file2.md
+++ b/file2.md
@@ -1,2 +1,3 @@
 this is second note
 my name is Emon
+* my hoby is **programming**
```

### Checking the Second Last Commit with Hash ID (`613e2b9`)

```bash
$ git show 613e2b9
commit 613e2b919ac0fa1042cb87bb64c68f50aac5e5bf
Author: Nh-em0n [nhemon2043@gmail.com]
Date:   Thu Sep 4 21:39:15 2025 +0600

    update note content

diff --git a/file1.md b/file1.md
index 7c9fa05..dce304a 100644
--- a/file1.md
+++ b/file1.md
@@ -1,3 +1,4 @@
 this is first note
 new data
 cat,dog and cow
+My friend name is Siam
diff --git a/file2.md b/file2.md
index af0af1d..d4b48b4 100644
--- a/file2.md
+++ b/file2.md
@@ -1 +1,2 @@
 this is second note
+my name is Emon
```

### Checking Last Commit by Indicating HEAD

```bash
$ git show HEAD
commit 604cfb0df6481eafa4dea8ccbc60b43cfc7435cb (HEAD -&gt; master)
Author: Nh-em0n [nhemon2043@gmail.com]
Date:   Fri Sep 5 00:50:02 2025 +0600

    update file2

diff --git a/file2.md b/file2.md
index d4b48b4..c560b9a 100644
--- a/file2.md
+++ b/file2.md
@@ -1,2 +1,3 @@
 this is second note
 my name is Emon
+* my hoby is **programming**
```

#### Checking the Second Last Commit by Indicating HEAD

```bash
$ git show HEAD~1
commit 613e2b919ac0fa1042cb87bb64c68f50aac5e5bf
Author: Nh-em0n [nhemon2043@gmail.com]
Date:   Thu Sep 4 21:39:15 2025 +0600

    update note content

diff --git a/file1.md b/file1.md
index 7c9fa05..dce304a 100644
--- a/file1.md
+++ b/file1.md
@@ -1,3 +1,4 @@
 this is first note
 new data
 cat,dog and cow
+My friend name is Siam
diff --git a/file2.md b/file2.md
index af0af1d..d4b48b4 100644
--- a/file2.md
+++ b/file2.md
@@ -1 +1,2 @@
 this is second note
+my name is Emon
```

### Checking the Last 5th Commit Indicating HEAD

```bash
$ git show HEAD~5
commit 6dcc1e70f91dd763d47bcd83fa3b8a2026e74c6b
Author: Nh-em0n [nhemon2043@gmail.com]
Date:   Wed Sep 3 23:39:49 2025 +0600

    create a temp file in temp folder

diff --git a/temp/a.temp b/temp/a.temp
new file mode 100644
index 0000000..0c88022
--- /dev/null
+++ b/temp/a.temp
@@ -0,0 +1 @@
+this is a temp file
```

### Checking Second Last Commit on `.gitignore`

```bash
$ git show HEAD~1 -- .gitignore
```

`empty` → no changes made on `.gitignore`.

### Checking Directory Tree when Creating `.gitignore` File

```bash
$ git log --oneline
604cfb0 (HEAD -&gt; master) update file2
613e2b9 update note content
1c07c60 Update file1
c2e0a9b remove a.temp
69f3b68 add .gitignore
6dcc1e7 create a temp file in temp folder
86a240e change file1 extension to md
7b2e050 Add two note file again
23088c4 remove file1
839814d remove file2
5ebf799 update note2
1656114 Initial Commit
```

Now the target commit is `69f3b68 add .gitignore`.

#### Checking File Tree at that Moment

```bash
$ git show 69f3b68^{tree}
tree 69f3b68^{tree}

.gitignore
file1.md
file2.md
temp/
```

### Checking `file2.md` Content on Last 5th Commit

```bash
$ git show HEAD~5:file2.md
this is second note
```

```bash
$ git show 6dcc1e7:file2.md
this is second note
```
+++</md></sn>