
	<sn><md>## Git Fast-Forward Merge{.text-center}

:::.row
:::.col-12 .col-lg-6
A **fast-forward merge** in Git is a type of merge that occurs when the **branch being merged has not diverged from the target branch**. In this case, Git can simply **move the pointer of the target branch forward**, creating a `linear history`. This article explains fast-forward merges with step-by-step examples, including code snippets, options, and configuration.
:::

:::.col-12 .col-lg-6
![diagram](https://d8it4huxumps7.cloudfront.net/uploads/images/653a479ad35e0_merge_in_git_01.jpg?d=2000x2000)
:::
:::

</md></sn>		
	<config>
		<tags>#08.fast forward merges</tags>
		<thumbnail></thumbnail>
		<heading></heading>
		<udate>Wed Sep 17 2025 00:15:05 GMT+0600 (Bangladesh Standard Time)</udate>
		<id>article-rqGHb12GjU</id>
		<duration></duration>
	</config>
<sn><md>### Create a Branch{.text-center}

To demonstrate fast-forward merges, first create a new branch from the main branch (usually `master` or `main`).

```bash
# Create a new branch named 'feature' then switch to it
git switch -C branch feature
```
</md></sn><sn><md>### Do Some Commits on the Branch{.text-center}

Make changes and commit them to the `feature` branch.

```bash
# Create a new file and add content
echo "Feature work" &gt; feature.txt

# Stage the file
git add feature.txt

# Commit the changes
git commit -m "Add feature.txt with initial content"

# Make another change
echo "More feature work" &gt;&gt; feature.txt
git add feature.txt
git commit -m "Update feature.txt with more content"
```</md></sn><sn><md>### Check All Log with Graph{.text-center}

You can visualize the commit history using a graph.

```bash
git log --oneline --graph --all
```

Example output (simplified):

```
* abc123 (HEAD -&gt; feature) Update feature.txt with more content
* def456 Add feature.txt with initial content
* 789xyz (master) Initial commit
```

The graph shows that the `feature` branch extends from `master` without divergence.</md></sn><sn><md>### Switch to Master and Merge Fast-Forward{.text-center}

Since no new commits exist on `master`, a fast-forward merge is possible.

```bash
# Switch back to master
git switch master

# Merge the feature branch
git merge feature
```

After this, the `master` branch pointer moves forward to include all `feature` branch commits. The history remains linear.</md></sn><sn><md>### Example of No Fast-Forward {.text-center}

Even if a fast-forward merge is possible, you can force Git to create a merge commit using `--no-ff`.

```bash
# Switch to master
git switch master

# Merge feature branch with no fast-forward
git merge --no-ff feature -m "Merge feature branch with a merge commit"
```

This creates a merge commit, ++preserving the record that a feature branch existed++.
</md></sn><sn><md>### [Pros]{.fg-teal} and [Cons]{.fg-red} {.text-center}

:::.row

:::.col-12 .col-lg-6 .fg-teal
**Pros:**

* Maintains a simple, linear history.
* Avoids unnecessary merge commits, keeping the log cleaner.
:::

:::.col-12 .col-lg-6 .fg-red
**Cons:**

* Loses explicit history of the feature branch; harder to track when a branch was merged.
* Can be confusing in larger projects where tracking feature development is important.
:::

:::
</md></sn><sn><md>### Config Setting of `--no-ff` {.text-center}

You can configure Git to avoid fast-forward merges by default.

```bash
# Set globally to always create merge commits
git config --global merge.ff false

# Set for the current repository only
git config merge.ff false
```

This ensures that Git always creates a merge commit, even if a fast-forward merge is possible, preserving branch history.

</md></sn><sn><md>## Difference {.text-center}

+++ see screenshot
![screenshot](https://i.imgur.com/LJQoRhw.png)
+++


:::.row
:::.col-12 .col-lg-6
#### FF-Merge{.text-center}
![fast-forward-mege-screenshot](https://i.imgur.com/mAcU45b.png) 
![diagram](https://raw.githubusercontent.com/Nh-em0n/QDoc/main/Programming/mGit/media/ff-vs-noff-merge-commit-diagram.svg)
:::

:::.col-12 .col-lg-6
#### No-FF Merge{.text-center}
![no-ff-mege-scr](https://i.imgur.com/qxLv6C9.png)
![diagram](https://raw.githubusercontent.com/Nh-em0n/QDoc/main/Programming/mGit/media/ff-vs-noff-merge-diagram.svg)
:::
:::



| Feature                     | Fast-Forward Merge                                                                                                       | `--no-ff` Merge                                                                                  |
| --------------------------- | ------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------ |
| **Definition**              | Moves the branch pointer forward to the target branch commit since there’s no divergent history.                         | Creates a new merge commit even if a fast-forward is possible.                                   |
| **Commit History**          | Linear history (looks like a straight line, no extra commit).                                                            | Non-linear history (explicit merge commit is added).                                             |
| **When Possible**           | Only when the target branch has no new commits after branching.                                                          | Always possible; Git forces a merge commit.                                                      |
| **Visibility of Branching** | Original feature branch history is not clearly visible. It looks like the commits were made directly on the main branch. | Clearly shows that a separate branch was created and merged.                                     |
| **Merge Commit**            | No new merge commit is created.                                                                                          | Always creates a merge commit (`Merge branch 'feature'`).                                        |
| **Pros**                    | Clean and simple history. Easier to read for small or quick fixes.                                                       | Maintains context of feature branches. Useful for tracking which commits came from which branch. |
| **Cons**                    | Hard to identify which commits belonged to the feature branch later.                                                     | History can get cluttered with many merge commits.                                               |
| **Best Use Case**           | Small changes, quick fixes, or when branch history isn’t important.                                                      | Long-running features, team projects where preserving branch context is valuable.                |
| **Command Example**         | `git merge feature`                                                                                                      | `git merge --no-ff feature`                                                                      |
</md></sn><sn><md>## Practise {.text-center}

+++ see

### Checking Status

```bash
$ git status
On branch master
nothing to commit, working tree clean

$ git branch
* master
  test
```

### Creating New Branch `feature`

```bash
$ git switch -C feature
Switched to a new branch 'feature'

$ git status
On branch feature
nothing to commit, working tree clean
```

### Committing on `feature`

```bash
$ echo "### Feature List" &gt; feature.txt
$ git status -s
?? feature.txt

$ git add -u
$ git commit -m "add feature.txt"
On branch feature
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        feature.txt
nothing added to commit but untracked files present (use "git add" to track)

$ git add .
warning: in the working copy of 'feature.txt', LF will be replaced by CRLF the next time Git touches it

$ git status -s
A  feature.txt

$ git commit -m "Add feature.txt"
[feature 26f1bd2] Add feature.txt
 1 file changed, 1 insertion(+)
 create mode 100644 feature.txt

$ echo "QDoc file content" &gt; doc.topic
$ git add doc.topic
warning: in the working copy of 'doc.topic', LF will be replaced by CRLF the next time Git touches it

$ git status -s
A  doc.topic

$ git commit -m "add doc file"
[feature 5ce7d11] add doc file
 1 file changed, 1 insertion(+)
 create mode 100644 doc.topic

5ce7d11 (HEAD -&gt; feature) add doc file
26f1bd2 Add feature.txt
5e1e550 (master) update note1
1212f2d update note1
....
```

### Switching to Master and Merge

```bash
$ git switch master
Switched to branch 'master'

$ git log --oneline --all --graph
* 5ce7d11 (feature) add doc file
* 26f1bd2 Add feature.txt
* 5e1e550 (HEAD -&gt; master) update note1
* 1212f2d update note1
| * 912c196 (test) start new Fact based note (note1)
| * fb30288 update note1
| * edc70c8 add new note
|/
* f18edaf bring fil2.md
* 83e5f5c remove fil2.md

$ git status
On branch master
nothing to commit, working tree clean
```

### Merging

```bash
$ git merge feature
Updating 5e1e550..5ce7d11
Fast-forward
 doc.topic   | 1 +
 feature.txt | 1 +
 2 files changed, 2 insertions(+)
 create mode 100644 doc.topic
 create mode 100644 feature.txt
```

### Checking Log

```bash
$ git log --oneline --all --graph
* 5ce7d11 (HEAD -&gt; master, feature) add doc file
* 26f1bd2 Add feature.txt
* 5e1e550 update note1
* 1212f2d update note1
| * 912c196 (test) start new Fact based note (note1)
| * fb30288 update note1
| * edc70c8 add new note
|/
* f18edaf bring fil2.md
* 83e5f5c remove fil2.md
* 604cfb0 update file2
* 613e2b9 update note content
...
```

### Creating Another Branch `bugfix`

```bash
$ git switch -C bugfix
Switched to a new branch 'bugfix'

$ echo "### Buglist" &gt; bug.md
$ git add .
warning: in the working copy of 'bug.md', LF will be replaced by CRLF the next time Git touches it

$ git status -s
A  bug.md

$ git commit -m "Create bug list(bug.md)"
[bugfix ccb8dca] Create bug list(bug.md)
 1 file changed, 1 insertion(+)
 create mode 100644 bug.md

$ echo "* Dynamic prompt \n * Dynamic Input feature" &gt;&gt; feature.txt
$ git add -u
warning: in the working copy of 'feature.txt', LF will be replaced by CRLF the next time Git touches it

$ git status -s
M  feature.txt

$ git commit -m "Add dynamic feature"
[bugfix 7cdcd2d] Add dynamic feature
 1 file changed, 1 insertion(+)

$ git log --oneline
7cdcd2d (HEAD -&gt; bugfix) Add dynamic feature
ccb8dca Create bug list(bug.md)
5ce7d11 (master, feature) add doc file
26f1bd2 Add feature.txt
```

### Switching to Master Then No-FF Merge

```bash
$ git log --oneline --graph --all
* 7cdcd2d (bugfix) Add dynamic feature
* ccb8dca Create bug list(bug.md)
* 5ce7d11 (HEAD -&gt; master, feature) add doc file
* 26f1bd2 Add feature.txt
* 5e1e550 update note1
* 1212f2d update note1
| * 912c196 (test) start new Fact based note (note1)
| * fb30288 update note1
| * edc70c8 add new note
|/
* f18edaf bring fil2.md
...
```

```bash
$ git branch
  bugfix
  feature
* master
  test

$ git status
On branch master
nothing to commit, working tree clean

$ git merge --no-ff bugfix -m "fix all prev bug"
Merge made by the 'ort' strategy.
 bug.md      | 1 +
 feature.txt | 1 +
 2 files changed, 2 insertions(+)
 create mode 100644 bug.md
```

```bash
$ git log --oneline --all --graph
*   bd42278 (HEAD -&gt; master) fix all prev bug
|\
| * 7cdcd2d (bugfix) Add dynamic feature
| * ccb8dca Create bug list(bug.md)
|/
* 5ce7d11 (feature) add doc file
* 26f1bd2 Add feature.txt
* 5e1e550 update note1
* 1212f2d update note1
| * 912c196 (test) start new Fact based note (note1)
| * fb30288 update note1
| * edc70c8 add new note
|/
* f18edaf bring fil2.md
* 83e5f5c remove fil2.md
...
```

### Notice on Commit List

```bash
*   bd42278 (HEAD -&gt; master) fix all prev bug
|\
| * 7cdcd2d (bugfix) Add dynamic feature
| * ccb8dca Create bug list(bug.md)
|/
* 5ce7d11 (feature) add doc file
* 26f1bd2 Add feature.txt
* 5e1e550 update note1
* 1212f2d update note1
| * 912c196 (test) start new Fact based note (note1)
| * fb30288 update note1
| * edc70c8 add new note
|/
* f18edaf bring fil2.md
* 83e5f5c remove fil2.md
* 604cfb0 update file2
* 613e2b9 update note content
```

### Test Branch Not Merged

```bash
| * 912c196 (test) start new Fact based note (note1)
| * fb30288 update note1
| * edc70c8 add new note
|/
```

### Feature Branch Merged by Fast-Forward Method

```bash
* 5ce7d11 (feature) add doc file
* 26f1bd2 Add feature.txt
* 5e1e550 update note1
* 1212f2d update note1
```

### Bugfix Branch Created and Then Merged with Master Branch Without Fast-Forward

```bash
*   bd42278 (HEAD -&gt; master) fix all prev bug
|\
| * 7cdcd2d (bugfix) Add dynamic feature
| * ccb8dca Create bug list(bug.md)
|/
* 5ce7d11 (feature) add doc file
```
+++



</file></md></sn><sn><md>### Diagram{.text-center}

```bash
# Before merge
#
# master branch is behind feature.
# HEAD is pointing to master.

master:    A --- B --- C  (HEAD -&gt; master)
                   \
feature:             D --- E (feature)

# Fast-forward merge
# master is moved forward to point where feature is.
# No new commit is created.

master:    A --- B --- C --- D --- E (HEAD -&gt; master, feature)
```

#### Explanation

* A **fast-forward merge** happens when the current branch (e.g., `master`) has no new commits since it diverged from the branch being merged (e.g., `feature`).
* Git simply **moves the pointer** of `master` forward to the tip of `feature`.
* No merge commit is created.

</md></sn>