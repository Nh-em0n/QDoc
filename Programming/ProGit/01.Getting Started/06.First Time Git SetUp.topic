<sn><md>## First-Time Git Setup
---

Now that you have Git on your system, you‚Äôll want to do a few things to **customize your Git environment**.
You should have to do these things only once on any given computer ‚Äî they‚Äôll stick around between upgrades.
You can also change them at any time by running through the commands again.

Git comes with a tool called `git config` that lets you **get and set configuration variables** that control all aspects of how Git looks and operates.
These variables can be stored in **three different places**:


### Configuration Levels
---

1. **`[path]/etc/gitconfig`**

   * Contains values applied to **every user** on the system and all their repositories.
   * Use `--system` option to read/write this file.
   * Requires **administrative or superuser privilege** to change.

2. **`~/.gitconfig` or `~/.config/git/config`**

   * Values specific to **you, the user**.
   * Use `--global` option to read/write this file.
   * Affects **all repositories** you work with on your system.

3. **`.git/config` (in the Git directory of a repository)**

   * Specific to that **single repository**.
   * Use `--local` option to read/write (this is the default behavior).
   * You must be inside a Git repository for this to work.

&gt; Each level overrides values in the previous level,
&gt; so values in `.git/config` trump those in `[path]/etc/gitconfig`.


### On Windows Systems
---

* Git looks for the `.gitconfig` file in the `$HOME` directory (`C:\Users\$USER` for most users).
* Still looks for `[path]/etc/gitconfig`, relative to the MSys root (installation directory).
* For Git version 2.x or later:

  * System-level config file locations:

    * **Windows XP:**
      `C:\Documents and Settings\All Users\Application Data\Git\config`
    * **Windows Vista and newer:**
      `C:\ProgramData\Git\config`
  * This config file can only be changed by:

    ```bash
    git config -f <file class="undefined d-none">
    ```

    as an admin.


### Viewing Your Configuration Settings
---

To **view all your settings and their origins**:

```bash
$ git config --list --show-origin
```

### Your Identity
---

The first thing you should do when you install Git is to set your **user name** and **email address**.

This is important because every Git commit uses this information, and it‚Äôs **immutably baked** into the commits you start creating:

```bash
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
```

* Use `--global` to apply it system-wide for your user.
* To override for a specific project, run the command **without `--global`** while inside that project.

&gt; Many GUI tools will help you set this up the first time you run them.


### Your Editor
---

Now that your identity is set up, you can configure the **default text editor** Git uses when it needs you to write a message.

If not configured, Git uses your **system‚Äôs default editor**.

#### To use Emacs:

```bash
$ git config --global core.editor emacs
```

#### To use Notepad++ on Windows:

```bash
$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"
```

&gt; Vim, Emacs and Notepad++ are popular text editors often used by developers on Unix-based systems like Linux and macOS or a Windows system.
&gt; If you are using another editor, or a 32-bit version, please find specific instructions for how to set up your favorite editor with Git in `git config core.editor` commands.

&gt; ‚ö†Ô∏è You may find, if you don‚Äôt set up your editor like this, you get into a really confusing state when Git attempts to launch it.
&gt; An example on a Windows system may include a prematurely terminated Git operation during a Git-initiated edit.

### Your Default Branch Name
---

By default, Git will create a branch called `master` when you run `git init`.

From **Git version 2.28** onwards, you can **set a different name** for the initial branch.

To set `main` as the default branch name:

```bash
$ git config --global init.defaultBranch main
```

### Checking Your Settings
---

To **list all current Git settings**, run:

```bash
$ git config --list
```

Example output:

```
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
```

&gt; You may see keys more than once, because Git reads the same key from different files (`[path]/etc/gitconfig`, `~/.gitconfig`, etc.).
&gt; Git uses the **last value** it finds for each unique key.

To check what Git thinks a specific key's value is:

```bash
$ git config user.name
```

Output:

```
John Doe
```

&gt; üí° Since Git might read the same configuration variable value from more than one file, you may get an **unexpected value**.
&gt; In such cases, you can query Git for the **origin** of that value:

```bash
$ git config --show-origin rerere.autoUpdate
```

Example output:

```
file:/home/johndoe/.gitconfig false
```
</file></md></sn><config style="display:none"><tags>#06.first time git setup</tags><thumbnail></thumbnail><heading></heading><udate>Sun Jun 01 2025 20:35:02 GMT+0600 (Bangladesh Standard Time)</udate><id>article-J9WTvNuOam</id><duration></duration></config>