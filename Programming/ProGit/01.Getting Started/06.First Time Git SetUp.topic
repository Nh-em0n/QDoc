<config style="display:none"><tags>#06.first time git setup</tags><thumbnail></thumbnail><heading></heading><udate>Thu Jul 10 2025 08:55:29 GMT+0600 (Bangladesh Standard Time)</udate><id>article-J9WTvNuOam</id><duration></duration></config><sn><h2>First-Time Git Setup</h2><p>Now that you have Git on your system, you‚Äôll want to do a few things to <strong>customize your Git environment</strong>.
You should have to do these things only once on any given computer ‚Äî they‚Äôll stick around between upgrades.
You can also change them at any time by running through the commands again.</p><p>Git comes with a tool called <code>git config</code> that lets you <strong>get and set configuration variables</strong> that control all aspects of how Git looks and operates.
These variables can be stored in <strong>three different places</strong>:</p></sn><sn class="col-12 col-md-10 col-lg-10 col-xl-10 col-xxl-9 p-0 p-md-3 p-lg-5 ignore"><h3>Configuration Levels</h3><tb class="py-2"><pre>| <strong>Scope</strong> | <strong>Description</strong> | <strong>Example Path</strong> | <strong>Example</strong> |
| ---  | ---  | ---  | --- |
| <strong>System</strong> | Applies to all users and all repositories on the system | <code>C:/Program Files/Git/etc/gitconfig</code> | <im>https://i.imgur.com/7yCx0q2.png^^file:C:/Program Files/Git/etc/gitconfig</im> |
| <strong>Global</strong> | Applies to a specific user across all repositories | <code>C:/Users/UserName/.gitconfig</code> | <im>https://i.imgur.com/5V0wVwE.png^^file:C:/Users/Emon/.gitconfig</im> |
| <strong>Repository</strong> | Applies to one specific repository only | <code>.git/config</code> in the root of a Git repo | <im>https://i.imgur.com/4jMuu4O.png^^C:\Users\Emon\git_practise.git\config</im> |
</pre></tb></sn><sn><h3>On Windows Systems</h3><ul>
<li>
<p>Git looks for the <code>.gitconfig</code> file in the <code>$HOME</code> directory (<code>C:\Users\$USER</code> for most users).</p>
</li>
<li>
<p>Still looks for <code>[path]/etc/gitconfig</code>, relative to the MSys root (installation directory).</p>
</li>
<li>
<p>For Git version 2.x or later:</p>
<ul>
<li>
<p>System-level config file locations:</p>
<ul>
<li><strong>Windows XP:</strong>
<code>C:\Documents and Settings\All Users\Application Data\Git\config</code></li>
<li><strong>Windows Vista and newer:</strong>
<code>C:\ProgramData\Git\config</code></li>
</ul>
</li>
<li>
<p>This config file can only be changed by:</p>
<pre data-v="bash">git config -f undefinedundefined Vim, Emacs and Notepad++ are popular text editors often used by developers on Unix-based systems like Linux and macOS or a Windows system.
</pre>
</li>
</ul>
</li>
</ul><p>&gt; If you are using another editor, or a 32-bit version, please find specific instructions for how to set up your favorite editor with Git in <code>git config core.editor</code> commands.</p><p>&gt; ‚ö†Ô∏è You may find, if you don‚Äôt set up your editor like this, you get into a really confusing state when Git attempts to launch it.
&gt; An example on a Windows system may include a prematurely terminated Git operation during a Git-initiated edit.</p></sn><sn><h3>Your Default Branch Name</h3><p>By default, Git will create a branch called <code>master</code> when you run <code>git init</code>.</p><p>From <strong>Git version 2.28</strong> onwards, you can <strong>set a different name</strong> for the initial branch.</p><p>To set <code>main</code> as the default branch name:</p><pre data-v="bash">$ git config --global init.defaultBranch main
</pre></sn><sn><h3>Checking Your Settings</h3><p>To <strong>list all current Git settings</strong>, run:</p><pre data-v="bash">$ git config --list
</pre><p>Example output:</p><pre data-v="plaintext">user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
</pre><p>&gt; You may see keys more than once, because Git reads the same key from different files (<code>[path]/etc/gitconfig</code>, <code>~/.gitconfig</code>, etc.).
&gt; Git uses the <strong>last value</strong> it finds for each unique key.</p><p>To check what Git thinks a specific key's value is:</p><pre data-v="bash">$ git config user.name
</pre><p>Output:</p><pre data-v="plaintext">John Doe
</pre><p>&gt; üí° Since Git might read the same configuration variable value from more than one file, you may get an <strong>unexpected value</strong>.
&gt; In such cases, you can query Git for the <strong>origin</strong> of that value:</p><pre data-v="bash">$ git config --show-origin rerere.autoUpdate
</pre><p>Example output:</p><pre data-v="plaintext">file:/home/johndoe/.gitconfig false
</pre></sn>