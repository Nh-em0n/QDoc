<sn><md>### What is Git?
---

Understanding what **Git** is and how it works fundamentally will make it easier to use effectively. Although Git's user interface may resemble other version control systems (VCSs) like CVS, Subversion, or Perforce, **its internal structure and behavior are quite different**. Clearing your mind of how those other systems work will help reduce confusion as you learn Git.

---

### Snapshots, Not Differences
---

![diagram](https://i.imgur.com/mkFplSw.png)

Most VCSs track changes as a series of file-based differences (called **delta-based version control**).
**Git, however, stores data as snapshots** of the entire project.

* Every time you **commit**, Git takes a snapshot of the current state of all files.
* If files haven't changed, Git doesn't store them again; it just **links to the previous identical file**.
* Think of Git as managing a **stream of snapshots**, not a series of file edits.

![diagram](https://i.imgur.com/uf9TY9F.png)

This snapshot-based approach allows Git to behave more like a **mini-filesystem** with powerful tools built on top of it, rather than just a VCS.

---

### Nearly Every Operation is Local
---

Unlike centralized VCSs, **most Git operations are local**:

* You don't need a network connection to commit, browse history, or view differences.
* Git reads directly from your local database, making operations **extremely fast**.
* Offline? No problem. You can work normally and sync later when online.

For example:

* **Browsing history** is instant.
* **Diff comparisons** between versions don’t need remote access.

This flexibility contrasts with systems like Perforce or Subversion, which often require network access to do even basic operations.

---

### Git Has Integrity
---

Everything in Git is **checksummed** before storage, ensuring data integrity.

* Git uses **SHA-1 hashes** (40-character strings) to uniquely identify content.
* Example: `24b9da6552252987aa493b52f8696cd6d3b00373`
* These hashes are used to **track content instead of file names**.

This design ensures that:

* Files cannot be altered undetected.
* Corruption or data loss is easily caught.

---

### Git Generally Only Adds Data
---

Git is designed to be **safe and resilient**:

* Most operations **add** data rather than deleting or overwriting it.
* It’s hard to lose committed data.
* Mistakes can usually be undone (unless data was never committed).

This design encourages **experimentation** without fear of permanent damage.

---

### The Three States of Git
---

Git files exist in **three key states**:

![diagram](https://i.imgur.com/3AW0gan.png)

| State         | Description                                                             |
| ------------- | ----------------------------------------------------------------------- |
| **Modified**  | File has been changed but not yet staged for commit.                    |
| **Staged**    | File is marked to be included in the next commit (in the staging area). |
| **Committed** | Changes are saved in the local Git database (the repository).           |

These states are tied to **three main sections** of a Git project:

| Section           | Role                                                            |
| ----------------- | --------------------------------------------------------------- |
| **Working Tree**  | The files currently being edited.                               |
| **Staging Area**  | A temporary area to prepare commits (also known as the index).  |
| **Git Directory** | The .git folder that stores the project's metadata and history. |

---

### Basic Git Workflow
---

1. **Modify files** in the working tree.
2. **Stage changes** selectively to prepare them for commit.
3. **Commit** the staged changes, storing a snapshot in the Git directory.

 ### Summary of states:
---

 * If a version is in the Git directory: it’s **committed**.
 * If it's staged: it’s **ready to commit**.
 * If modified but not staged: it’s just **modified**.

</md></sn><config style="display:none"><tags>#03.what is git</tags><thumbnail></thumbnail><heading></heading><udate>Sun Jun 01 2025 19:54:20 GMT+0600 (Bangladesh Standard Time)</udate><id>article-EPp79zpzMW</id><duration></duration></config>