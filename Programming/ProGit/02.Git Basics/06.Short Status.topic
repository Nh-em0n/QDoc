<sn><md>## Short Status
---

### Using the Short Status Flag

While the default `git status` output is detailed, it can be verbose. For a more compact summary, use the **short status** flag:

```
$ git status -s
```

or

```
$ git status --short
```

Example output:

```
 M README  
MM Rakefile  
A  lib/git.rb  
M  lib/simplegit.rb  
?? LICENSE.txt
```

### Interpreting Short Status Output

* `??` — New, **untracked** files (e.g., `LICENSE.txt`)
* `A` — New file **added to the staging area** (e.g., `lib/git.rb`)
* `M` — File **modified**

There are two columns:

* **Left column** = Status in the **staging area**
* **Right column** = Status in the **working directory**

#### Example Breakdown:

* ` M README`
  → Modified in the **working directory**, not staged

* `MM Rakefile`
  → Modified in both the **staging area** and the **working directory**

* `A  lib/git.rb`
  → Newly **added** and **staged**

* `M  lib/simplegit.rb`
  → Modified and **staged**

* `?? LICENSE.txt`
  → **Untracked** file

This concise format is ideal for quickly checking your working state.
</md></sn><config style="display:none"><tags>#02.4.short status</tags><thumbnail></thumbnail><heading></heading><udate>Mon Jun 02 2025 08:09:49 GMT+0600 (Bangladesh Standard Time)</udate><id>article-vDFt5KE05A</id><duration></duration></config>