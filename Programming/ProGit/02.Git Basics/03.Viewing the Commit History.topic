<sn class="col-11 bg-blur"><md>## Viewing the Commit History
---

After you have created several commits, or if you have cloned a repository with an existing commit history, youâ€™ll probably want to look back to see what has happened. The most basic and powerful tool to do this is the `git log` command.

---

### Cloning the Sample Project

These examples use a very simple project called **simplegit**. To get the project, run:

```bash
$ git clone https://github.com/schacon/simplegit-progit
```

When you run `git log` in this project, you should get output similar to:

```bash
$ git log
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    Change version number

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    Remove unnecessary test

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    Initial commit
```

By default, `git log` lists commits in reverse chronological order, displaying:

* SHA-1 checksum
* Author name and email
* Commit date
* Commit message

---

### Output Formatting Options

Git offers many options for customizing `git log` output.

#### Show Patch with Each Commit: `-p` or `--patch`

```bash
$ git log -p -2
```

This displays the diff for each of the last two commits:

```diff
diff --git a/Rakefile b/Rakefile
index a874b73..8f94139 100644
--- a/Rakefile
+++ b/Rakefile
@@ -5,7 +5,7 @@ require 'rake/gempackagetask'
 spec = Gem::Specification.new do |s|
   s.platform = Gem::Platform::RUBY
   s.name = "simplegit"
-  s.version = "0.1.0"
+  s.version = "0.1.1"
   s.author = "Scott Chacon"
   s.email = "schacon@gee-mail.com"
   s.summary = "A simple gem for using Git in Ruby code."
```

Useful for code review or reviewing collaborator changes.

#### Show Commit Summary Stats: `--stat`

```bash
$ git log --stat
```

Example:

```text
commit ca82a6d...
Author: Scott Chacon ...
Date:   ...

    Change version number

 Rakefile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
```

Shows files changed, lines inserted/deleted.

#### Abbreviated Output: `--pretty`

```bash
$ git log --pretty=oneline
```

Outputs each commit on a single line:

```text
ca82a6dff817ec66f44342007202690a93763949 Change version number
085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 Remove unnecessary test
```

Other options: `short`, `full`, `fuller`.

#### Custom Format: `--pretty=format:`

```bash
$ git log --pretty=format:"%h - %an, %ar : %s"
```

```text
ca82a6d - Scott Chacon, 6 years ago : Change version number
085bb3b - Scott Chacon, 6 years ago : Remove unnecessary test
```

##### Table 1: Useful Specifiers for `--pretty=format`

| Specifier | Description              |
| --------- | ------------------------ |
| `%H`      | Commit hash              |
| `%h`      | Abbreviated commit hash  |
| `%an`     | Author name              |
| `%ae`     | Author email             |
| `%ad`     | Author date              |
| `%ar`     | Author date, relative    |
| `%cn`     | Committer name           |
| `%ce`     | Committer email          |
| `%cd`     | Committer date           |
| `%cr`     | Committer date, relative |
| `%s`      | Commit message subject   |

&gt; **Author vs Committer**
&gt; The author wrote the code; the committer applied it. In team workflows, both can differ.

#### Show ASCII Graph: `--graph`

```bash
$ git log --pretty=format:"%h %s" --graph
```

```text
* 2d3acf9 Ignore errors from SIGCHLD on trap
* 5e3ee11 Merge branch 'master'
|\
| * 420eac9 Add method for getting the current branch
* | 30e367c Timeout code and tests
```

Helps visualize branch/merge history.

---

### Table 2: Common `git log` Output Options

| Option            | Description                                                  |
| ----------------- | ------------------------------------------------------------ |
| `-p`              | Show patch (diff) for each commit                            |
| `--stat`          | Show file change statistics                                  |
| `--shortstat`     | Only show insertions/deletions summary                       |
| `--name-only`     | Show only file names changed                                 |
| `--name-status`   | Show file names and status (added/modified/deleted)          |
| `--abbrev-commit` | Abbreviate SHA-1                                             |
| `--relative-date` | Show dates as "2 weeks ago", etc.                            |
| `--graph`         | ASCII graph of branches and merges                           |
| `--pretty`        | Customize format (`oneline`, `short`, `full`, `format`, etc) |
| `--oneline`       | Equivalent to `--pretty=oneline --abbrev-commit`             |

---

### Limiting Log Output

#### Show Only Last N Commits

```bash
$ git log -2
```

#### Filter by Date

```bash
$ git log --since=2.weeks
$ git log --since="2008-01-15" --until="2008-01-30"
```

#### Filter by Author or Committer

```bash
$ git log --author="John"
$ git log --committer="Alice"
```

#### Search by Commit Message

```bash
$ git log --grep="bug fix"
```

You can combine multiple `--author` and `--grep` options. Use `--all-match` to match all criteria.

#### Show Commits Changing a String: `-S`

```bash
$ git log -S function_name
```

Shows commits that add/remove `function_name`.

#### Limit to Specific File or Directory

```bash
$ git log -- path/to/file
```

---

### Table 3: Options to Limit `git log` Output

| Option                | Description                                     |
| --------------------- | ----------------------------------------------- |
| `-<n>`                | Show only last `n` commits                      |
| `--since`, `--after`  | Only show commits after a specific date         |
| `--until`, `--before` | Only show commits before a specific date        |
| `--author`            | Filter by author name                           |
| `--committer`         | Filter by committer name                        |
| `--grep`              | Filter commits with matching message            |
| `-S`                  | Filter commits changing occurrences of a string |

---

### Advanced Example

Show commits by Junio Hamano in October 2008 affecting test files, excluding merges:

```bash
$ git log --pretty="%h - %s" --author="Junio C Hamano" \
  --since="2008-10-01" --before="2008-11-01" --no-merges -- t/
```

Example output:

```text
5610e3b - Fix testcase failure when extended attributes are in use  
acd3b9e - Enhance hold_lock_file_for_{update,append}() API  
f563754 - demonstrate breakage of detached checkout with symbolic link HEAD  
...
```

---

### Exclude Merge Commits

Merge commits can clutter logs. To exclude them:

```bash
$ git log --no-merges
```
</n></schacon@gee-mail.com></schacon@gee-mail.com></schacon@gee-mail.com></md></sn><config style="display:none"><tags>#03.viewing the commit history</tags><thumbnail></thumbnail><heading></heading><udate>Fri Jun 20 2025 17:51:01 GMT+0600 (Bangladesh Standard Time)</udate><id>article-ziP8IP7UTA</id><duration></duration></config>