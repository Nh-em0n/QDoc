<sn><md>## Tagging

Like most VCSs, Git has the ability to tag specific points in a repository’s history as being important. Typically, people use this functionality to mark release points (v1.0, v2.0 and so on). In this section, you’ll learn how to list existing tags, how to create and delete tags, and what the different types of tags are.

---

### Listing Your Tags

Listing the existing tags in Git is straightforward. Just type:

```bash
$ git tag
v1.0
v2.0
```

This command lists the tags in alphabetical order. The order displayed has no real importance.

You can also search for tags that match a particular pattern:

```bash
$ git tag -l "v1.8.5*"
v1.8.5  
v1.8.5-rc0  
v1.8.5-rc1  
v1.8.5-rc2  
v1.8.5-rc3  
v1.8.5.1  
v1.8.5.2  
v1.8.5.3  
v1.8.5.4  
v1.8.5.5  
```

&gt; **Note:**
&gt;
&gt; * `git tag` alone implicitly lists tags, `-l` or `--list` is optional.
&gt; * If using wildcards, `-l` or `--list` is mandatory.

---

### Creating Tags

Git supports **two types of tags**:

* **Lightweight tags**
* **Annotated tags**

#### Annotated Tags

Annotated tags are stored as full objects in the Git database. They include:

* Checksum
* Tagger name, email, and date
* Message
* GPG signature (optional)

```bash
$ git tag -a v1.4 -m "my version 1.4"
$ git tag
v0.1  
v1.3  
v1.4  
```

To view tag data with its commit:

```bash
$ git show v1.4
tag v1.4  
Tagger: Ben Straub <ben@straub.cc>  
Date: Sat May 3 20:19:12 2014 -0700  
my version 1.4  

commit ca82a6dff817ec66f44342007202690a93763949  
Author: Scott Chacon <schacon@gee-mail.com>  
Date: Mon Mar 17 21:52:11 2008 -0700  
Change version number  
```

#### Lightweight Tags

These are simply pointers to commits — no metadata.

```bash
$ git tag v1.4-lw
$ git tag
v0.1  
v1.3  
v1.4  
v1.4-lw  
v1.5  
```

View the commit (without tag metadata):

```bash
$ git show v1.4-lw
commit ca82a6dff817ec66f44342007202690a93763949  
Author: Scott Chacon <schacon@gee-mail.com>  
Date: Mon Mar 17 21:52:11 2008 -0700  
Change version number  
```

---

### Tagging Later

You can tag past commits using their hash:

```bash
$ git log --pretty=oneline
...
9fceb02d0ae598e95dc970b74767f19372d61af8 Update rakefile
...

$ git tag -a v1.2 9fceb02
```

Check:

```bash
$ git tag
v0.1  
v1.2  
v1.3  
v1.4  
v1.4-lw  
v1.5  

$ git show v1.2
tag v1.2  
Tagger: Scott Chacon <schacon@gee-mail.com>  
Date: Mon Feb 9 15:32:16 2009 -0800  
version 1.2  

commit 9fceb02d0ae598e95dc970b74767f19372d61af8  
Author: Magnus Chacon <mchacon@gee-mail.com>  
Date: Sun Apr 27 20:43:35 2008 -0700  
Update rakefile  
```

---

### Sharing Tags

Git does **not** push tags by default.

#### Push a Single Tag

```bash
$ git push origin v1.5
```

#### Push All Tags

```bash
$ git push origin --tags
```

&gt; **Note:**
&gt; `git push --tags` pushes both lightweight and annotated tags.
&gt; `git push <remote> --follow-tags` pushes only annotated tags.

---

### Deleting Tags

#### Delete Local Tag

```bash
$ git tag -d v1.4-lw
Deleted tag 'v1.4-lw' (was e7d5add)
```

#### Delete Remote Tag (two methods)

```bash
$ git push origin :refs/tags/v1.4-lw
```

OR

```bash
$ git push origin --delete v1.4-lw
```

---

### Checking Out Tags

```bash
$ git checkout v2.0.0
```

You’ll be in a **detached HEAD** state. To keep your changes, create a branch:

```bash
$ git checkout -b version2 v2.0.0
```

Or using `switch`:

```bash
$ git switch -c version2
```

&gt; **Note:**
&gt; Commits made in detached HEAD are not associated with any branch unless you create one.
</remote></mchacon@gee-mail.com></schacon@gee-mail.com></schacon@gee-mail.com></schacon@gee-mail.com></ben@straub.cc></md></sn><config style="display:none"><tags>#06.tagging</tags><thumbnail></thumbnail><heading></heading><udate>Mon Jun 02 2025 09:41:53 GMT+0600 (Bangladesh Standard Time)</udate><id>article-dwBJjH6fzD</id><duration></duration></config>