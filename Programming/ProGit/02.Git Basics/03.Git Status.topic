<config style="display:none"><tags>#02.1.checking the status of your files</tags><thumbnail></thumbnail><heading></heading><udate>Thu Jul 10 2025 20:59:51 GMT+0600 (Bangladesh Standard Time)</udate><id>article-Y1hevVON2y</id><duration></duration></config><sn class="bar bar-indigo"><h2>Git Status</h2><p>Git is a powerful distributed version control system, and among its many essential commands, <code>git status</code> stands out as a beginner’s best friend. It provides an immediate snapshot of your working directory and staging area, helping you understand what Git is currently tracking and what it isn’t. Whether you're new to Git or looking to build a solid foundation, understanding <code>git status</code> is a vital step.</p></sn><sn class="bar bar-pink"><h4>What Is <code>git status</code>?</h4><p>The <code>git status</code> command is used to display the state of the working directory and the staging area. It shows which changes have been staged (i.e., prepared for the next commit), which changes haven't, and which files aren’t being tracked by Git.</p><h5>Syntax:</h5><pre data-v="bash">git status
</pre></sn><sn class="bar bar-both bar-red"><h4>What Does <code>git status</code> Show?</h4><p>Here’s what you typically see when you run the command:</p><ol>
<li>
<p><strong>Current branch name</strong>
Example: <code>On branch main</code></p>
</li>
<li>
<p><strong>Whether your branch is up to date with the remote</strong>
Example: <code>Your branch is up to date with 'origin/main'.</code></p>
</li>
<li>
<p><strong>Changes to be committed</strong> (Staged files)
Files added with <code>git add</code>, ready for the next commit.</p>
</li>
<li>
<p><strong>Changes not staged for commit</strong>
Modified files not yet staged using <code>git add</code>.</p>
</li>
<li>
<p><strong>Untracked files</strong>
Files that are not being tracked by Git and have not been added.</p>
</li>
</ol></sn><sn class="bar bar-teal"><h4>Output Example</h4><p>Suppose you edited a file called <code>index.html</code> and created a new file <code>app.js</code>. After running <code>git status</code>, you might see:</p><pre data-v="bash">On branch main
Your branch is up to date with 'origin/main'.

Changes not staged for commit:
  (use "git add &lt;file&gt;..." to update what will be committed)
  modified:   index.html

Untracked files:
  (use "git add &lt;file&gt;..." to include in what will be committed)
  app.js
</pre><p>This tells you:</p><ul>
<li><code>index.html</code> has been modified but not staged.</li>
<li><code>app.js</code> is a new untracked file.</li>
</ul></sn><sn class="bar bar-orange"><h4>Common Use Cases</h4><h5>1. <strong>Checking Changes After Editing</strong></h5><p>After making changes to files, run:</p><pre data-v="bash">git status
</pre><p>to see what’s modified.</p><h5>2. <strong>Before Committing</strong></h5><p>Use it to verify that the correct files are staged before running:</p><pre data-v="bash">git commit -m "Your message"
</pre><h5>3. <strong>Detecting Untracked Files</strong></h5><p>It helps in identifying new files that need to be added with:</p><pre data-v="bash">git add filename
</pre><h5>4. <strong>Checking Staged vs. Unstaged Files</strong></h5><p>Files in staging area show up under “Changes to be committed,” while others appear as “Changes not staged.”</p></sn><sn class="bar bar-green"><h4>Differences from Other Commands</h4><ul>
<li><code>git diff</code> shows what exactly has changed.</li>
<li><code>git log</code> shows past commits.</li>
<li><code>git status</code> tells you the current state of your project files and what Git knows about them.</li>
</ul><p>They all work together, but <code>git status</code> is usually your first check-in point.</p></sn><sn class="bar bar-yellow"><h4>Best Practices</h4><ul>
<li><strong>Run it frequently</strong>: It’s fast and can prevent mistakes.</li>
<li><strong>Always check before committing</strong>: Ensures that you’re committing exactly what you intend.</li>
<li><strong>Use with other commands</strong>: Combine it with <code>git diff</code> and <code>git add</code> for smooth version control.</li>
</ul></sn><sn class="bar bar-pink"><h4>Summary Table</h4><tb class="py-2"><pre>| Element | Description |
| ---  | --- |
| <code>Changes to be committed</code> | Files staged with <code>git add</code>, ready to be committed. |
| <code>Changes not staged</code> | Files modified but not yet added. |
| <code>Untracked files</code> | New files not tracked by Git. |
| <code>git status</code> + <code>-s</code> | Short status view (e.g., <code>M file.txt</code> for modified). |
| Run before... | <code>git add</code>, <code>git commit</code>, <code>git push</code> |
</pre></tb><h4>Conclusion</h4><p>The <code>git status</code> command is your constant companion in Git. As a beginner, forming the habit of running it often will save you time, reduce confusion, and improve your understanding of Git's internal processes. Once mastered, it becomes second nature—a quick glance that tells you everything you need to know about the current state of your project.
</p></sn><sn class="bar"><h2>Practise</h2><p>My last checkpoint in my portfolio folder was to init git on it.</p><p>Now I will create a new index.html file and lets see what happend.</p><im>https://i.imgur.com/O4vkvXf.png^^Creating new index.html file</im><h5>Git Bash</h5><pre data-v="bash">Emon@DESKTOP-S2A6KR1 MINGW64 /e/coding/Git/Git Practise/portfolio (master)
$ ls
index.html

Emon@DESKTOP-S2A6KR1 MINGW64 /e/coding/Git/Git Practise/portfolio (master)
$ git status
On branch master

No commits yet

Untracked files:
  (use "git add &lt;file&gt;..." to include in what will be committed)
        index.html

nothing added to commit but untracked files present (use "git add" to track)
</pre><p>When we create a new file , git set it as a untracked file</p></sn>