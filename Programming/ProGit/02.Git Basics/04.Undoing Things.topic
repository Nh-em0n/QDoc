<sn><md>## Undoing Things

At any stage, you may want to undo something. Here, we’ll review a few basic tools for undoing changes that you’ve made. **Be careful**, because you can’t always undo some of these undos. This is one of the few areas in Git where you may lose work if you do it wrong.

---

### Amending the Last Commit

One common undo takes place when you commit too early—perhaps you forget to add some files or mess up your commit message. You can redo the commit using the `--amend` option:

```bash
$ git commit --amend
```

This command uses your current staging area to overwrite the last commit. If nothing changed since the last commit, only the commit message editor opens.

**Example:**

```bash
$ git commit -m 'Initial commit'
$ git add forgotten_file
$ git commit --amend
```

You end up with a single improved commit.

&gt; **Note:** Amending replaces the last commit entirely, as if the previous commit never happened.

&gt; **Caution:** Only amend commits that are **local**. Amending **pushed** commits and force-pushing can disrupt collaborators.

---

### Unstaging a Staged File

Say you've accidentally staged multiple files with `git add *` and want to unstage one:

```bash
$ git reset HEAD <file class="undefined d-none">
```

**Example:**

```bash
$ git reset HEAD CONTRIBUTING.md
```

This unstages the file but keeps your working directory changes intact.

&gt; **Note:** `git reset` can be dangerous with the `--hard` flag, but in this context, it's safe—your working file isn't touched.

---

### Unmodifying a Modified File

To discard changes and revert a file back to the last committed version:

```bash
$ git checkout -- <file class="undefined d-none">
```

**Example:**

```bash
$ git checkout -- CONTRIBUTING.md
```

&gt; **Caution:** This command **permanently deletes** your local changes. Use it only if you're sure.

If you'd like to keep your changes but put them aside, consider **stashing** or **branching** (covered in *Git Branching*).

&gt; **Tip:** Anything committed in Git is almost always recoverable. Uncommitted work, however, is typically lost forever.

---

## Undoing Things with `git restore`

Git 2.23.0 introduced `git restore` as an alternative to `git reset` and `git checkout` for undoing changes.

---

### Unstaging a Staged File with `git restore`

To unstage a file:

```bash
$ git restore --staged <file class="undefined d-none">
```

**Example:**

```bash
$ git restore --staged CONTRIBUTING.md
```

This removes the file from the staging area while preserving your local modifications.

---

### Unmodifying a Modified File with `git restore`

To discard local changes and restore the file to its last committed state:

```bash
$ git restore <file class="undefined d-none">
```

**Example:**

```bash
$ git restore CONTRIBUTING.md
```

&gt; **Caution:** Like `checkout -- <file class="undefined d-none">`, this deletes your local changes permanently. Don’t use it unless you’re certain.

---

By using these commands thoughtfully, you can safely undo actions in Git—just be mindful of which changes are recoverable and which are not.
</file></file></file></file></file></md></sn><config style="display:none"><tags>#04.undoing things</tags><thumbnail></thumbnail><heading></heading><udate>Mon Jun 02 2025 09:16:45 GMT+0600 (Bangladesh Standard Time)</udate><id>article-2EgUvhT4RI</id><duration></duration></config>