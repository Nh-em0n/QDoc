<config style="display:none"><tags>#03.viewing the commit history</tags><thumbnail>https://www.svgrepo.com/show/303548/git-icon-logo.svg</thumbnail><heading>Git Commit History</heading><udate>Thu Jul 10 2025 23:13:34 GMT+0600 (Bangladesh Standard Time)</udate><id>article-ziP8IP7UTA</id><duration>5</duration></config><sn><h2>Understanding <code>git log</code> in Git</h2><h3>Introduction</h3><p>In Git, every time you make a commit, Git stores it in a history known as the <strong>commit log</strong>. The <code>git log</code> command is the primary tool used to <strong>view and explore this history</strong>. Whether you're reviewing past changes, tracing bugs, or understanding project evolution, <code>git log</code> is essential to navigating Git repositories effectively.</p><hr><h3>What Is <code>git log</code>?</h3><p>The <code>git log</code> command shows a list of <strong>commits made in the repository</strong>, starting from the most recent. Each entry provides detailed metadata such as the commit hash, author, date, and commit message.</p><h4>Basic Syntax:</h4><pre data-v="bash">git log
</pre><hr><h3>Default Output</h3><p>Running <code>git log</code> displays each commit like this:</p><pre data-v="plaintext">commit 6c2a3a1d9fdbcc8a7c71b1f8d2ab8c421e163a98
Author: Jane Doe &lt;jane@example.com&gt;
Date:   Wed Jul 10 10:24:17 2025 +0600

    Add responsive layout to homepage
</pre><hr><h3>Common <code>git log</code> Options</h3><tb class="py-2"><pre>| Option | Description |
| ---  | --- |
| <code>--oneline</code> | Show each commit on a single line (short hash + msg) |
| <code>--graph</code> | Draw a text-based commit tree |
| <code>--decorate</code> | Show branch and tag names alongside commits |
| <code>--stat</code> | Show what files changed and how many lines |
| <code>-p</code> | Show the full diff introduced by each commit |
| <code>--since="2 weeks ago"</code> | Filter commits by date |
| <code>--author="John"</code> | Filter by author |
| <code>-- &lt;file&gt;</code> | Show commits related to a specific file |
</pre></tb><hr><h3>Useful Command Combinations</h3><h4>1. Short and Readable Log</h4><pre data-v="bash">git log --oneline
</pre><h4>2. View Commit Tree</h4><pre data-v="bash">git log --oneline --graph --decorate --all
</pre><h4>3. See What Changed (with Stats)</h4><pre data-v="bash">git log --stat
</pre><h4>4. Show Full Changes (Diff)</h4><pre data-v="bash">git log -p
</pre><h4>5. Filter by File</h4><pre data-v="bash">git log --oneline -- &lt;file_name&gt;
</pre><hr><h3>Aliases for Git Log</h3><p>To simplify repetitive commands, create aliases:</p><pre data-v="bash">git config --global alias.lg "log --oneline --graph --decorate --all"
</pre><p>Now, you can just run:</p><pre data-v="bash">git lg
</pre><hr><h3>Example Output (Using <code>--oneline --graph --decorate</code>)</h3><pre data-v="plaintext">* 3f1c3d2 (HEAD -&gt; main) Fix form validation
* 5a8e2f1 (origin/main) Update footer
* 9d5a1b9 Add about page
</pre><hr><h3>Summary Table</h3><tb class="py-2"><pre>| Task | Command |
| ---  | --- |
| Basic log | <code>git log</code> |
| One-line summary | <code>git log --oneline</code> |
| Visual tree view | <code>git log --oneline --graph --decorate --all</code> |
| Show changes in each commit | <code>git log -p</code> |
| Show commit file stats | <code>git log --stat</code> |
| Filter by author | <code>git log --author="Alice"</code> |
| Filter by date | <code>git log --since="1 month ago"</code> |
| Show log for specific file | <code>git log -- &lt;file&gt;</code> |
</pre></tb><hr><h3>Best Practices</h3><ul>
<li>Use <code>--oneline</code> for a quick overview.</li>
<li>Use <code>--graph</code> to understand branch history.</li>
<li>Create aliases for frequent log formats.</li>
<li>Combine filters to isolate meaningful history slices.</li>
</ul><hr><h3>Conclusion</h3><p>The <code>git log</code> command is your window into the entire history of a Git project. From auditing changes to investigating bugs or reviewing contributions, it's a tool every developer must master. Start simple, then experiment with flags to unlock its full power.</p><p>Let me know if youâ€™d like a printable Git log cheatsheet or visualization examples!
&lt;/file_name&gt;<a href="mailto:/jane@example.com">/jane@example.com</a></p></sn>