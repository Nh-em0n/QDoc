<sn><md>## Working with Remotes

To collaborate on a Git project, you must understand how to manage remote repositories — versions of your project hosted elsewhere (on the Internet, a network, or even your local system). These may be read-only or read/write. Common tasks include adding/removing remotes, managing remote branches, tracking branches, and pushing or pulling code.

&gt; **Note:** A “remote” repository can exist on the same machine. The term only implies it’s not the current working directory.

---

### Showing Your Remotes

To list all configured remote servers:

```bash
$ git remote
```

Example output after cloning a repository:

```bash
$ git clone https://github.com/schacon/ticgit
$ cd ticgit
$ git remote
origin
```

To see URLs associated with each remote:

```bash
$ git remote -v
origin  https://github.com/schacon/ticgit (fetch)
origin  https://github.com/schacon/ticgit (push)
```

With multiple remotes:

```bash
$ git remote -v
bakkdoor  https://github.com/bakkdoor/grit (fetch)
cho45     https://github.com/cho45/grit (push)
origin    git@github.com:mojombo/grit.git (fetch)
```

---

### Adding Remote Repositories

To add a new remote:

```bash
$ git remote add <shortname> <url>
```

Example:

```bash
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin  https://github.com/schacon/ticgit (fetch)
pb      https://github.com/paulboone/ticgit (fetch)
```

Now you can fetch from `pb`:

```bash
$ git fetch pb
```

---

### Fetching and Pulling from Your Remotes

To download data from a remote without modifying your current work:

```bash
$ git fetch <remote>
```

To automatically fetch and merge into your current branch (if it tracks a remote branch):

```bash
$ git pull
```

&gt; **Note:**
&gt; From Git 2.27+, you’ll receive a warning unless you configure the `pull.rebase` option:
&gt;
&gt; * Default behavior:
&gt;
&gt;   ```bash
&gt;   git config --global pull.rebase "false"
&gt;   ```
&gt; * Rebase on pull:
&gt;
&gt;   ```bash
&gt;   git config --global pull.rebase "true"
&gt;   ```

---

### Pushing to Your Remotes

To share your work:

```bash
$ git push <remote> <branch>
```

Example:

```bash
$ git push origin master
```

&gt; You must fetch and merge others’ changes before pushing if someone else has pushed upstream first.

---

### Inspecting a Remote

To view details of a specific remote:

```bash
$ git remote show <remote>
```

Example:

```bash
$ git remote show origin
* remote origin
  Fetch URL: https://github.com/schacon/ticgit
  Push URL: https://github.com/schacon/ticgit
  HEAD branch: master
  Remote branches: master, dev-branch
  Local branches configured for 'git pull':
    master merges with remote master
  Local refs configured for 'git push':
    master pushes to master (up to date)
```

More complex repositories may show:

```bash
Remote branches:
  issue-43          tracked
  issue-45          tracked
  issue-11          stale (use 'git remote prune' to remove)
```

---

### Renaming and Removing Remotes

To rename a remote:

```bash
$ git remote rename pb paul
```

&gt; Updates all references (e.g., `pb/master` becomes `paul/master`).

To remove a remote:

```bash
$ git remote remove paul
```

&gt; This deletes all associated remote-tracking branches and configuration.
</remote></branch></remote></remote></url></shortname></md></sn><config style="display:none"><tags>#05.working with remotes</tags><thumbnail></thumbnail><heading></heading><udate>Mon Jun 02 2025 09:29:41 GMT+0600 (Bangladesh Standard Time)</udate><id>article-F2D9ijPYrZ</id><duration></duration></config>