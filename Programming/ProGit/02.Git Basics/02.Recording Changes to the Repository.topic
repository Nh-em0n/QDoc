<sn><md>## Recording Changes to the Repository
---

At this point, you should have a bona fide Git repository on your local machine, and a checkout or working copy of all of its files in front of you. Typically, you’ll want to start making changes and committing snapshots of those changes into your repository each time the project reaches a state you want to record.



### Tracked vs. Untracked Files
---

* **Tracked files**
  Files that were in the last snapshot, as well as any newly staged files. They can be:

  * Unmodified
  * Modified
  * Staged
    In short, tracked files are files that Git knows about.

* **Untracked files**
  Files in your working directory that:

  * Were not in your last snapshot
  * Are not in your staging area

When you first clone a repository, all files will be *tracked and unmodified* because Git just checked them out and you haven’t edited anything yet.

---

![diagram](https://i.imgur.com/VJNYpsh.png)


**The Modify–Stage–Commit Cycle**

As you edit files:

* Git marks them as **modified** (changed since your last commit).
* You **stage** the modified files you want to include in the next commit.
* You **commit** the staged files to the repository.

This cycle then repeats.

---

**Figure 8.** The lifecycle of the status of your files
</md></sn><config style="display:none"><tags>#02.recording changes to the repository</tags><thumbnail></thumbnail><heading></heading><udate>Mon Jun 02 2025 08:15:09 GMT+0600 (Bangladesh Standard Time)</udate><id>article-4EuNVZlCAI</id><duration></duration></config>