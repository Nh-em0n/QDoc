<config style="display:none"><tags>#02.4.short status</tags><thumbnail></thumbnail><heading></heading><udate>Thu Jul 10 2025 21:58:44 GMT+0600 (Bangladesh Standard Time)</udate><id>article-vDFt5KE05A</id><duration></duration></config><sn class="bar bar-pink"><h3>Git Short Status</h3><p>As you grow more comfortable with Git, efficiency becomes important. One simple but powerful way to speed up your workflow is to use <strong><code>git status -s</code></strong>, also known as <strong>short status</strong>. This variant of the regular <code>git status</code> command provides a concise, symbolic summary of your changes—perfect for advanced users or even beginners seeking clarity without clutter.</p></sn><sn class="bar bar-teal"><h3>What Is <code>git status -s</code>?</h3><p>The command <code>git status -s</code> (or <code>git status --short</code>) gives a <strong>minimal and color-coded overview</strong> of the status of your working directory and staging area. Instead of verbose explanations, it shows changes using short symbols in two columns.</p><h4>Syntax:</h4><pre data-v="bash">git status -s
</pre></sn><sn class="bar bar-yellow"><h3>Format of the Output</h3><p>The short status output shows two columns before each filename:</p><tb class="py-2"><pre>| Column | Meaning |
| ---  | --- |
| 1st | Staging area status |
| 2nd | Working directory status |
</pre></tb><p>Each column uses single-letter codes:</p><tb class="py-2"><pre>| Code | Meaning |
| ---  | --- |
| <code>M</code> | Modified |
| <code>A</code> | Added to staging |
| <code>D</code> | Deleted |
| <code>R</code> | Renamed |
| <code>C</code> | Copied |
| <code>?</code> | Untracked file |
| <code>!</code> | Ignored file |
</pre></tb></sn><sn class="bar bar-blue"><h3>Example Output</h3><p>Suppose you've made several changes. After running:</p><pre data-v="bash">git status -s
</pre><p>You might see:</p><pre data-v="plaintext"> M index.html
MM style.css
A  app.js
 D style.css
?? new_file.py
</pre><h4>Interpreting This:</h4><ul>
<li><code> M index.html</code> → Modified and&nbsp;<strong>staged(M col-1</strong><strong style="background-color: rgba(0, 0, 0, 0); caret-color: rgb(175, 175, 184); font-size: 19.2px;">)</strong></li><li><code>&nbsp;M index.html</code> → Modified but <strong>not staged(M col-2</strong><strong style="background-color: rgba(0, 0, 0, 0); caret-color: rgb(175, 175, 184); font-size: 19.2px;">)</strong></li><li><code>MM style.css</code> → Modified -&gt; S<strong>taged -&gt; again Modified</strong><im>https://miro.medium.com/v2/resize:fit:601/1*4LTNUbBDIiOUWDJ77mNGLQ.jpeg^^MM in git short status</im></li>
<li><code>A  app.js</code> → Newly added and <strong>staged</strong></li>
<li><code> D style.css</code> → Deleted in working directory and <strong>not staged</strong></li>
<li><code>?? new_file.py</code> → Untracked file</li>
</ul></sn><sn class="bar bar-red"><h3>Summary Table</h3><tb class="py-2"><pre>| Command | Purpose |
| ---  | --- |
| <code>git status</code> | Full status with detailed text |
| <code>git status -s</code> | Short status view |
| <code>git status -sb</code> | Short status + branch info |
| <code>git status --short</code> | Same as <code>-s</code>, more verbose flag |
</pre></tb></sn>